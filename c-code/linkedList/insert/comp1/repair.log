Initialize the program!
Verify Test Cases
All passed!
Done Verification
Generating repair candidates!
Processing prog.c
Total 477 different repair schemas!!!!
Total 1040 different repair candidate templates for scoring!!!
Trying different candidates!
BasicTester pointer: 0xae7b838
StringConstTester pointer: 0xae581d8
CondTester pointer: 0xae33fd0
Counter: 1
Batcher Size:0
Preprocess the following candidate with CondTester:
Priority 20000
At location prog.c:51
--Src File: prog.c
Fragment 0:
if ((argc < 2) && !(__abst_hole(argc, argv)))
    return 0;


CondTester, a patch instance with id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    
//Patch 0:
if ((argc < 2) && !(__is_neg(2, &(argc), sizeof (argc), &(argv), sizeof (argv))))
    return 0;

//CodeSeg 1:
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 1
Counter: 2
Batcher Size:1
Preprocess the following candidate with CondTester:
Priority 20000
At location prog.c:51
--Src File: prog.c
Fragment 0:
if ((argc < 2) || (__abst_hole(argc, argv)))
    return 0;


CondTester, a patch instance with id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    
//Patch 0:
if ((argc < 2) || (__is_neg(2, &(argc), sizeof (argc), &(argv), sizeof (argv))))
    return 0;

//CodeSeg 1:
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 2
Counter: 3
Batcher Size:2
Preprocess the following candidate with CondTester:
Priority 20000
At location prog.c:53
--Src File: prog.c
Fragment 0:
if ((f == ((void *)0)) && !(__abst_hole(f, argv, argc)))
    return 0;


CondTester, a patch instance with id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    
//Patch 0:
if ((f == ((void *)0)) && !(__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;

//CodeSeg 1:
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 3
Counter: 4
Batcher Size:3
Preprocess the following candidate with CondTester:
Priority 20000
At location prog.c:53
--Src File: prog.c
Fragment 0:
if ((f == ((void *)0)) || (__abst_hole(f, argv, argc)))
    return 0;


CondTester, a patch instance with id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    
//Patch 0:
if ((f == ((void *)0)) || (__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;

//CodeSeg 1:
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 4
Counter: 5
Batcher Size:4
Preprocess the following candidate with CondTester:
Priority 20000
At location prog.c:59
--Src File: prog.c
Fragment 0:
if ((x[0] != '"') && !(__abst_hole(f, l, argv, node, argc))) {
    insertSort(&l, atoi(x));
}


CondTester, a patch instance with id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((x[0] != '"') && !(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc)))) {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 5
Counter: 6
Batcher Size:5
Preprocess the following candidate with CondTester:
Priority 20000
At location prog.c:59
--Src File: prog.c
Fragment 0:
if ((x[0] != '"') || (__abst_hole(f, l, argv, node, argc))) {
    insertSort(&l, atoi(x));
}


CondTester, a patch instance with id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((x[0] != '"') || (__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc)))) {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 6
Counter: 7
Batcher Size:6
Preprocess the following candidate with CondTester:
Priority 12496
At location prog.c:35
--Src File: prog.c
Fragment 0:
if ((__abst_hole(in, v, in->element, l, in->next)))
    return;
newNode(&in);


CondTester, a patch instance with id 6:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
if ((__is_neg(5, &(in), sizeof (in), &(v), sizeof (v), &(in->element), sizeof (in->element), &(l), sizeof (l), &(in->next), sizeof (in->next))))
    return;
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 7
Counter: 8
Batcher Size:7
Preprocess the following candidate with CondTester:
Priority 12486
At location prog.c:28
--Src File: prog.c
Fragment 0:
if ((__abst_hole(n)))
    return;
*n = malloc(sizeof(struct Entry));


CondTester, a patch instance with id 7:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
if ((__is_neg(1, &(n), sizeof (n))))
    return;
*n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 8
Counter: 9
Batcher Size:8
Preprocess the following candidate with CondTester:
Priority 12479
At location prog.c:21
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, (*l)->head, (*l)->head->next, (*l)->head->element, (*l)->size)))
    return;
*l = malloc(sizeof(struct List));


CondTester, a patch instance with id 8:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
if ((__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 9
Counter: 10
Batcher Size:9
Preprocess the following candidate with CondTester:
Priority 12474
At location prog.c:51
--Src File: prog.c
Fragment 0:
if ((__abst_hole(argc, argv)))
    return 0;
if (argc < 2)
    return 0;


CondTester, a patch instance with id 9:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    
//Patch 0:
if ((__is_neg(2, &(argc), sizeof (argc), &(argv), sizeof (argv))))
    return 0;
if (argc < 2)
    return 0;

//CodeSeg 1:
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 10
Counter: 11
Batcher Size:10
Preprocess the following candidate with CondTester:
Priority 12474
At location prog.c:51
--Src File: prog.c
Fragment 0:
if ((__abst_hole(argc, argv)))
    return 2;
if (argc < 2)
    return 0;


CondTester, a patch instance with id 10:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    
//Patch 0:
if ((__is_neg(2, &(argc), sizeof (argc), &(argv), sizeof (argv))))
    return 2;
if (argc < 2)
    return 0;

//CodeSeg 1:
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 11
Counter: 12
Batcher Size:11
Preprocess the following candidate with CondTester:
Priority 12474
At location prog.c:51
--Src File: prog.c
Fragment 0:
if ((__abst_hole(argc, argv)))
    return 20;
if (argc < 2)
    return 0;


CondTester, a patch instance with id 11:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    
//Patch 0:
if ((__is_neg(2, &(argc), sizeof (argc), &(argv), sizeof (argv))))
    return 20;
if (argc < 2)
    return 0;

//CodeSeg 1:
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 12
Counter: 13
Batcher Size:12
Preprocess the following candidate with CondTester:
Priority 12474
At location prog.c:51
--Src File: prog.c
Fragment 0:
if ((__abst_hole(argc, argv)))
    return 1;
if (argc < 2)
    return 0;


CondTester, a patch instance with id 12:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    
//Patch 0:
if ((__is_neg(2, &(argc), sizeof (argc), &(argv), sizeof (argv))))
    return 1;
if (argc < 2)
    return 0;

//CodeSeg 1:
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 13
Counter: 14
Batcher Size:13
Preprocess the following candidate with CondTester:
Priority 9994
At location prog.c:61
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, node, l->head, argv, argc, l->size)))
    return 0;
insertSort(&l, atoi(x));


CondTester, a patch instance with id 13:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    return 0;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 14
Counter: 15
Batcher Size:14
Preprocess the following candidate with CondTester:
Priority 9994
At location prog.c:61
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, node, l->head, argv, argc, l->size)))
    return 2;
insertSort(&l, atoi(x));


CondTester, a patch instance with id 14:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    return 2;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 15
Counter: 16
Batcher Size:15
Preprocess the following candidate with CondTester:
Priority 9994
At location prog.c:61
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, node, l->head, argv, argc, l->size)))
    return 20;
insertSort(&l, atoi(x));


CondTester, a patch instance with id 15:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    return 20;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 16
Counter: 17
Batcher Size:16
Preprocess the following candidate with CondTester:
Priority 9994
At location prog.c:61
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, node, l->head, argv, argc, l->size)))
    break;
insertSort(&l, atoi(x));


CondTester, a patch instance with id 16:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    break;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 17
Counter: 18
Batcher Size:17
Preprocess the following candidate with CondTester:
Priority 9994
At location prog.c:61
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, node, l->head, argv, argc, l->size)))
    return 1;
insertSort(&l, atoi(x));


CondTester, a patch instance with id 17:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    return 1;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 18
Counter: 19
Batcher Size:18
Preprocess the following candidate with CondTester:
Priority 9988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, node, argc)))
    return 0;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


CondTester, a patch instance with id 18:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    return 0;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 19
Counter: 20
Batcher Size:19
Preprocess the following candidate with CondTester:
Priority 9988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, node, argc)))
    return 1;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


CondTester, a patch instance with id 19:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    return 1;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 20
Counter: 21
Batcher Size:20
Preprocess the following candidate with CondTester:
Priority 9988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, node, argc)))
    return 2;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


CondTester, a patch instance with id 20:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    return 2;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 21
Counter: 22
Batcher Size:21
Preprocess the following candidate with CondTester:
Priority 9988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, node, argc)))
    return 20;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


CondTester, a patch instance with id 21:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    return 20;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 22
Counter: 23
Batcher Size:22
Preprocess the following candidate with CondTester:
Priority 9988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, node, argc)))
    break;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


CondTester, a patch instance with id 22:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    break;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 23
Counter: 24
Batcher Size:23
Preprocess the following candidate with BasicTester:
Priority 7500
At location prog.c:35
--Src File: prog.c
Fragment 0:
in->element = (0);
newNode(&in);


BasicTester, a patch instance with id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->element = (0);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 24
Counter: 25
Batcher Size:24
Preprocess the following candidate with BasicTester:
Priority 7500
At location prog.c:21
--Src File: prog.c
Fragment 0:
(*l)->head->next = (*(l))->head;
*l = malloc(sizeof(struct List));


BasicTester, a patch instance with id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
(*l)->head->next = (*(l))->head;
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 25
Counter: 26
Batcher Size:25
Preprocess the following candidate with BasicTester:
Priority 7500
At location prog.c:28
--Src File: prog.c
Fragment 0:
(*n)->next = ((void *)0);
*n = malloc(sizeof(struct Entry));


BasicTester, a patch instance with id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
(*n)->next = ((void *)0);
*n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 26
Counter: 27
Batcher Size:26
Preprocess the following candidate with BasicTester:
Priority 7496
At location prog.c:35
--Src File: prog.c
Fragment 0:
in->next = (in);
newNode(&in);


BasicTester, a patch instance with id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->next = (in);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 27
Counter: 28
Batcher Size:27
Preprocess the following candidate with BasicTester:
Priority 7496
At location prog.c:35
--Src File: prog.c
Fragment 0:
newNode(&in);
newNode(&in);


BasicTester, a patch instance with id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&in);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 28
Counter: 29
Batcher Size:28
Preprocess the following candidate with BasicTester:
Priority 7496
At location prog.c:35
--Src File: prog.c
Fragment 0:
printf("%d ", (in)->next->element);
newNode(&in);


BasicTester, a patch instance with id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
printf("%d ", (in)->next->element);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 29
Counter: 30
Batcher Size:29
Preprocess the following candidate with BasicTester:
Priority 7496
At location prog.c:35
--Src File: prog.c
Fragment 0:
in->next = (in)->next;
newNode(&in);


BasicTester, a patch instance with id 6:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->next = (in)->next;
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 30
Counter: 31
Batcher Size:30
Preprocess the following candidate with BasicTester:
Priority 7496
At location prog.c:35
--Src File: prog.c
Fragment 0:
newNode(&((*(l))->head));
newNode(&in);


BasicTester, a patch instance with id 7:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&((*(l))->head));
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 31
Counter: 32
Batcher Size:31
Preprocess the following candidate with BasicTester:
Priority 7496
At location prog.c:35
--Src File: prog.c
Fragment 0:
newNode(&(in));
newNode(&in);


BasicTester, a patch instance with id 8:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&(in));
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 32
Counter: 33
Batcher Size:32
Preprocess the following candidate with BasicTester:
Priority 7496
At location prog.c:35
--Src File: prog.c
Fragment 0:
in->element = (v);
newNode(&in);


BasicTester, a patch instance with id 9:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->element = (v);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 33
Counter: 34
Batcher Size:33
Preprocess the following candidate with BasicTester:
Priority 7496
At location prog.c:35
--Src File: prog.c
Fragment 0:
in->element = v;
newNode(&in);


BasicTester, a patch instance with id 10:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->element = v;
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 34
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(5, &(in), sizeof (in), &(v), sizeof (v), &(in->element), sizeof (in->element), &(l), sizeof (l), &(in->next), sizeof (in->next))))
        return;
    newNode(&in);
    }
    else if (__get_mutant()==1) {
    in->element = (0);
    newNode(&in);
    }
    else if (__get_mutant()==2) {
    in->next = (in);
    newNode(&in);
    }
    else if (__get_mutant()==3) {
    newNode(&in);
    newNode(&in);
    }
    else if (__get_mutant()==4) {
    printf("%d ", (in)->next->element);
    newNode(&in);
    }
    else if (__get_mutant()==5) {
    in->next = (in)->next;
    newNode(&in);
    }
    else if (__get_mutant()==6) {
    newNode(&((*(l))->head));
    newNode(&in);
    }
    else if (__get_mutant()==7) {
    newNode(&(in));
    newNode(&in);
    }
    else if (__get_mutant()==8) {
    in->element = (v);
    newNode(&in);
    }
    else if (__get_mutant()==9) {
    in->element = v;
    newNode(&in);
    }
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 6:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
if ((__is_neg(5, &(in), sizeof (in), &(v), sizeof (v), &(in->element), sizeof (in->element), &(l), sizeof (l), &(in->next), sizeof (in->next))))
    return;
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
BasicTester, Testing instance id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->element = (0);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->next = (in);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&in);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
printf("%d ", (in)->next->element);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 6:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->next = (in)->next;
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 7:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&((*(l))->head));
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 8:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&(in));
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 9:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->element = (v);
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 10:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
in->element = v;
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 35
Batcher Size:24
Preprocess the following candidate with StringConstTester:
Priority 7492
At location prog.c:71
--Src File: prog.c
Fragment 0:
printf((__abst_hole()), l->size);


StringConstTester, a patch instance with id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf((" %##uni*##"), l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 35
Counter: 36
Batcher Size:25
Preprocess the following candidate with BasicTester:
Priority 7486
At location prog.c:28
--Src File: prog.c
Fragment 0:
*n = malloc(sizeof(struct Entry));
*n = malloc(sizeof(struct Entry));


BasicTester, a patch instance with id 11:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
*n = malloc(sizeof(struct Entry));
*n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 36
Counter: 37
Batcher Size:26
Preprocess the following candidate with BasicTester:
Priority 7479
At location prog.c:21
--Src File: prog.c
Fragment 0:
newNode(&((*l)->head));
*l = malloc(sizeof(struct List));


BasicTester, a patch instance with id 12:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
newNode(&((*l)->head));
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 37
Counter: 38
Batcher Size:27
Preprocess the following candidate with BasicTester:
Priority 7479
At location prog.c:21
--Src File: prog.c
Fragment 0:
newNode(&((*(l))->head));
*l = malloc(sizeof(struct List));


BasicTester, a patch instance with id 13:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
newNode(&((*(l))->head));
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 38
Counter: 39
Batcher Size:28
Preprocess the following candidate with BasicTester:
Priority 7479
At location prog.c:21
--Src File: prog.c
Fragment 0:
*l = malloc(sizeof(struct List));
*l = malloc(sizeof(struct List));


BasicTester, a patch instance with id 14:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
*l = malloc(sizeof(struct List));
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 39
Counter: 40
Batcher Size:29
Preprocess the following candidate with BasicTester:
Priority 7479
At location prog.c:21
--Src File: prog.c
Fragment 0:
(*l)->head->next = (*l)->head;
*l = malloc(sizeof(struct List));


BasicTester, a patch instance with id 15:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
(*l)->head->next = (*l)->head;
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 40
Counter: 41
Batcher Size:30
Preprocess the following candidate with BasicTester:
Priority 7474
At location prog.c:51
--Src File: prog.c
Fragment 0:
if (argc < 2)
    return 0;
if (argc < 2)
    return 0;


BasicTester, a patch instance with id 16:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    
//Patch 0:
if (argc < 2)
    return 0;
if (argc < 2)
    return 0;

//CodeSeg 1:
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 41
Counter: 42
Batcher Size:31
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:44
--Src File: prog.c
Fragment 0:
memset(e, 0, sizeof (*(e)));
in->next = e->next;


BasicTester, a patch instance with id 17:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
memset(e, 0, sizeof (*(e)));
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 42
Counter: 43
Batcher Size:32
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:44
--Src File: prog.c
Fragment 0:
memset(in, 0, sizeof (*(in)));
in->next = e->next;


BasicTester, a patch instance with id 18:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
memset(in, 0, sizeof (*(in)));
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 43
Counter: 44
Batcher Size:33
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:44
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(in, e, in->next, e->next, v, e->next->element, l, in->element, e->next->next, e->element)))
    in->next = e->next;


CondTester, a patch instance with id 23:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
if (!(__is_neg(10, &(in), sizeof (in), &(e), sizeof (e), &(in->next), sizeof (in->next), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(l), sizeof (l), &(in->element), sizeof (in->element), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
    in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 44
Counter: 45
Batcher Size:34
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:44
--Src File: prog.c
Fragment 0:
memset(e->next, 0, sizeof (*(e->next)));
in->next = e->next;


BasicTester, a patch instance with id 19:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
memset(e->next, 0, sizeof (*(e->next)));
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 45
Counter: 46
Batcher Size:35
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:44
--Src File: prog.c
Fragment 0:
if ((__abst_hole(in, e, in->next, e->next, v, e->next->element, l, in->element, e->next->next, e->element)))
    return;
in->next = e->next;


CondTester, a patch instance with id 24:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
if ((__is_neg(10, &(in), sizeof (in), &(e), sizeof (e), &(in->next), sizeof (in->next), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(l), sizeof (l), &(in->element), sizeof (in->element), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
    return;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 46
Counter: 47
Batcher Size:36
Preprocess the following candidate with CondTester:
Priority 4999
At location prog.c:38
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, e, (*l)->head, e->next, v, e->next->element, in, (*l)->size, e->next->next, e->element)))
    return;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


CondTester, a patch instance with id 25:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
if ((__is_neg(10, &(l), sizeof (l), &(e), sizeof (e), &((*l)->head), sizeof ((*l)->head), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(in), sizeof (in), &((*l)->size), sizeof ((*l)->size), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
    return;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 47
Counter: 48
Batcher Size:37
Preprocess the following candidate with CondTester:
Priority 4999
At location prog.c:38
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, e, (*l)->head, e->next, v, e->next->element, in, (*l)->size, e->next->next, e->element)))
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }


CondTester, a patch instance with id 26:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
if (!(__is_neg(10, &(l), sizeof (l), &(e), sizeof (e), &((*l)->head), sizeof ((*l)->head), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(in), sizeof (in), &((*l)->size), sizeof ((*l)->size), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 48
Counter: 49
Batcher Size:38
Preprocess the following candidate with BasicTester:
Priority 4999
At location prog.c:38
--Src File: prog.c
Fragment 0:
memset((*l), 0, sizeof (*((*l))));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 20:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
memset((*l), 0, sizeof (*((*l))));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 49
Counter: 50
Batcher Size:39
Preprocess the following candidate with BasicTester:
Priority 4999
At location prog.c:38
--Src File: prog.c
Fragment 0:
memset(e->next, 0, sizeof (*(e->next)));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 21:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
memset(e->next, 0, sizeof (*(e->next)));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 50
Counter: 51
Batcher Size:40
Preprocess the following candidate with BasicTester:
Priority 4999
At location prog.c:38
--Src File: prog.c
Fragment 0:
memset(e, 0, sizeof (*(e)));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 22:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
memset(e, 0, sizeof (*(e)));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 51
Counter: 52
Batcher Size:41
Preprocess the following candidate with CondTester:
Priority 4998
At location prog.c:37
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, (*l)->head, v, in, in->element, in->next, (*l)->size)))
    return;
struct Entry *e = (*l)->head;


CondTester, a patch instance with id 27:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &(v), sizeof (v), &(in), sizeof (in), &(in->element), sizeof (in->element), &(in->next), sizeof (in->next), &((*l)->size), sizeof ((*l)->size))))
    return;
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 52
Counter: 53
Batcher Size:42
Preprocess the following candidate with BasicTester:
Priority 4998
At location prog.c:37
--Src File: prog.c
Fragment 0:
memset((*l), 0, sizeof (*((*l))));
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 23:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
memset((*l), 0, sizeof (*((*l))));
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 53
Counter: 54
Batcher Size:43
Preprocess the following candidate with CondTester:
Priority 4997
At location prog.c:36
--Src File: prog.c
Fragment 0:
if ((__abst_hole(v, in, in->element, l, (*l)->head, in->next, (*l)->size)))
    return;
in->element = v;


CondTester, a patch instance with id 28:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
if ((__is_neg(7, &(v), sizeof (v), &(in), sizeof (in), &(in->element), sizeof (in->element), &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &(in->next), sizeof (in->next), &((*l)->size), sizeof ((*l)->size))))
    return;
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 54
Counter: 55
Batcher Size:44
Preprocess the following candidate with CondTester:
Priority 4997
At location prog.c:36
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(v, in, in->element, l, (*l)->head, in->next, (*l)->size)))
    in->element = v;


CondTester, a patch instance with id 29:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
if (!(__is_neg(7, &(v), sizeof (v), &(in), sizeof (in), &(in->element), sizeof (in->element), &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &(in->next), sizeof (in->next), &((*l)->size), sizeof ((*l)->size))))
    in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 55
Counter: 56
Batcher Size:45
Preprocess the following candidate with BasicTester:
Priority 4997
At location prog.c:36
--Src File: prog.c
Fragment 0:
memset(in, 0, sizeof (*(in)));
in->element = v;


BasicTester, a patch instance with id 24:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
memset(in, 0, sizeof (*(in)));
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 56
Counter: 57
Batcher Size:46
Preprocess the following candidate with BasicTester:
Priority 4996
At location prog.c:35
--Src File: prog.c
Fragment 0:
newNode(&in);


BasicTester, a patch instance with id 25:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 57
Counter: 58
Batcher Size:47
Preprocess the following candidate with BasicTester:
Priority 4996
At location prog.c:35
--Src File: prog.c
Fragment 0:
memset(in, 0, sizeof (*(in)));
newNode(&in);


BasicTester, a patch instance with id 26:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
memset(in, 0, sizeof (*(in)));
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 58
Counter: 59
Batcher Size:48
Preprocess the following candidate with CondTester:
Priority 4996
At location prog.c:35
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(in, v, in->element, l, in->next)))
    newNode(&in);


CondTester, a patch instance with id 30:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
if (!(__is_neg(5, &(in), sizeof (in), &(v), sizeof (v), &(in->element), sizeof (in->element), &(l), sizeof (l), &(in->next), sizeof (in->next))))
    newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 59
Counter: 60
Batcher Size:49
Preprocess the following candidate with CondTester:
Priority 4995
At location prog.c:34
--Src File: prog.c
Fragment 0:
if ((__abst_hole(v, l)))
    return;
struct Entry *in;


CondTester, a patch instance with id 31:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    
//Patch 0:
if ((__is_neg(2, &(v), sizeof (v), &(l), sizeof (l))))
    return;
struct Entry *in;

//CodeSeg 1:
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 60
Counter: 61
Batcher Size:50
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
printf("%d ", (node)->next->element);
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 27:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf("%d ", (node)->next->element);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 61
Counter: 62
Batcher Size:51
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
printf("%d ", node->next->element);
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 28:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf("%d ", node->next->element);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 62
Counter: 63
Batcher Size:52
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
node = l->head;
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 29:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = l->head;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 63
Counter: 64
Batcher Size:53
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
printf(" %d", (l)->size);
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 30:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf(" %d", (l)->size);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 64
Counter: 65
Batcher Size:54
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
printf(" %d", l->size);
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 31:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf(" %d", l->size);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 65
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            //prophet generated patch
            if (__get_mutant()==0) {
            if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
                return 0;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==1) {
            if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
                return 2;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==2) {
            if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
                return 20;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==3) {
            if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
                break;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==4) {
            if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
                return 1;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==5) {
            printf("%d ", (node)->next->element);
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==6) {
            printf("%d ", node->next->element);
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==7) {
            node = l->head;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==8) {
            printf(" %d", (l)->size);
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==9) {
            printf(" %d", l->size);
            insertSort(&l, atoi(x));
            }
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 13:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    return 0;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
CondTester, Testing instance id 14:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    return 2;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
CondTester, Testing instance id 15:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    return 20;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
CondTester, Testing instance id 16:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    break;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
CondTester, Testing instance id 17:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    return 1;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
BasicTester, Testing instance id 27:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf("%d ", (node)->next->element);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 28:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf("%d ", node->next->element);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 29:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = l->head;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 30:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf(" %d", (l)->size);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 31:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf(" %d", l->size);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 66
Batcher Size:45
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
node = node->next;
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 32:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = node->next;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 66
Counter: 67
Batcher Size:46
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&(l), atoi(x));
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 33:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&(l), atoi(x));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 67
Counter: 68
Batcher Size:47
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
newNode(&(node));
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 34:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
newNode(&(node));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 68
Counter: 69
Batcher Size:48
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
node = (node);
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 35:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = (node);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 69
Counter: 70
Batcher Size:49
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
node = (node)->next;
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 36:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = (node)->next;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 70
Counter: 71
Batcher Size:50
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
node = (l)->head;
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 37:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = (l)->head;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 71
Counter: 72
Batcher Size:51
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, atoi(x));
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 38:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, atoi(x));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 72
Counter: 73
Batcher Size:52
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
newList(&(l));
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 39:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
newList(&(l));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 73
Counter: 74
Batcher Size:53
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
newList(&l);
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 40:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
newList(&l);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 74
Counter: 75
Batcher Size:54
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 41:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 75
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            //prophet generated patch
            if (__get_mutant()==0) {
            node = node->next;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==1) {
            insertSort(&(l), atoi(x));
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==2) {
            newNode(&(node));
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==3) {
            node = (node);
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==4) {
            node = (node)->next;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==5) {
            node = (l)->head;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==6) {
            insertSort(&l, atoi(x));
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==7) {
            newList(&(l));
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==8) {
            newList(&l);
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==9) {
            if (x[0] != '"') {
                insertSort(&l, atoi(x));
            }
            insertSort(&l, atoi(x));
            }
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 32:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = node->next;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 33:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&(l), atoi(x));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 34:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
newNode(&(node));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 35:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = (node);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 36:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = (node)->next;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 37:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
node = (l)->head;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 38:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, atoi(x));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 39:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
newList(&(l));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 40:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
newList(&l);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 41:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 76
Batcher Size:45
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
if (f == ((void *)0))
    return 0;
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 42:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if (f == ((void *)0))
    return 0;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 76
Counter: 77
Batcher Size:46
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
fclose(f);
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 43:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
fclose(f);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 77
Counter: 78
Batcher Size:47
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
if (argc < 2)
    return 0;
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 44:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if (argc < 2)
    return 0;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 78
Counter: 79
Batcher Size:48
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, system(x));


BasicTester, a patch instance with id 45:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, system(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 79
Counter: 80
Batcher Size:49
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
memset(l, 0, sizeof (*(l)));
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 46:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
memset(l, 0, sizeof (*(l)));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 80
Counter: 81
Batcher Size:50
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
fclose((f));
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 47:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
fclose((f));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 81
Counter: 82
Batcher Size:51
Preprocess the following candidate with CondTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, f, node, l->head, argv, argc, l->size)))
    insertSort(&l, atoi(x));


CondTester, a patch instance with id 32:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if (!(__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 82
Counter: 83
Batcher Size:52
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, puts(x));


BasicTester, a patch instance with id 48:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, puts(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 83
Counter: 84
Batcher Size:53
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, scanf(x));


BasicTester, a patch instance with id 49:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, scanf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 84
Counter: 85
Batcher Size:54
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, scanf(x));


BasicTester, a patch instance with id 50:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, scanf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 85
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            //prophet generated patch
            if (__get_mutant()==0) {
            if (f == ((void *)0))
                return 0;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==1) {
            fclose(f);
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==2) {
            if (argc < 2)
                return 0;
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==3) {
            insertSort(&l, system(x));
            }
            else if (__get_mutant()==4) {
            memset(l, 0, sizeof (*(l)));
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==5) {
            fclose((f));
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==6) {
            if (!(__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
                insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==7) {
            insertSort(&l, puts(x));
            }
            else if (__get_mutant()==8) {
            insertSort(&l, scanf(x));
            }
            else if (__get_mutant()==9) {
            insertSort(&l, scanf(x));
            }
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 42:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if (f == ((void *)0))
    return 0;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 43:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
fclose(f);
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 44:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if (argc < 2)
    return 0;
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 45:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, system(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 46:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
memset(l, 0, sizeof (*(l)));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 47:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
fclose((f));
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 32:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
if (!(__is_neg(7, &(l), sizeof (l), &(f), sizeof (f), &(node), sizeof (node), &(l->head), sizeof (l->head), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->size), sizeof (l->size))))
    insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
BasicTester, Testing instance id 48:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, puts(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 49:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, scanf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 50:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, scanf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 86
Batcher Size:45
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, scanf(x));


BasicTester, a patch instance with id 51:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, scanf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 86
Counter: 87
Batcher Size:46
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, atoi(x));


BasicTester, a patch instance with id 52:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 87
Counter: 88
Batcher Size:47
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, printf(x));


BasicTester, a patch instance with id 53:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, printf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 88
Counter: 89
Batcher Size:48
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, printf(x));


BasicTester, a patch instance with id 54:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, printf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 89
Counter: 90
Batcher Size:49
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&l, remove(x));


BasicTester, a patch instance with id 55:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, remove(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 90
Counter: 91
Batcher Size:50
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
scanf(&l, atoi(x));


BasicTester, a patch instance with id 56:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
scanf(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 91
Counter: 92
Batcher Size:51
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
strchr(&l, atoi(x));


BasicTester, a patch instance with id 57:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
strchr(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 92
Counter: 93
Batcher Size:52
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
strrchr(&l, atoi(x));


BasicTester, a patch instance with id 58:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
strrchr(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 93
Counter: 94
Batcher Size:53
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
strrchr(&l, atoi(x));


BasicTester, a patch instance with id 59:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
strrchr(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 94
Counter: 95
Batcher Size:54
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
strchr(&l, atoi(x));


BasicTester, a patch instance with id 60:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
strchr(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 95
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            //prophet generated patch
            if (__get_mutant()==0) {
            insertSort(&l, scanf(x));
            }
            else if (__get_mutant()==1) {
            insertSort(&l, atoi(x));
            }
            else if (__get_mutant()==2) {
            insertSort(&l, printf(x));
            }
            else if (__get_mutant()==3) {
            insertSort(&l, printf(x));
            }
            else if (__get_mutant()==4) {
            insertSort(&l, remove(x));
            }
            else if (__get_mutant()==5) {
            scanf(&l, atoi(x));
            }
            else if (__get_mutant()==6) {
            strchr(&l, atoi(x));
            }
            else if (__get_mutant()==7) {
            strrchr(&l, atoi(x));
            }
            else if (__get_mutant()==8) {
            strrchr(&l, atoi(x));
            }
            else if (__get_mutant()==9) {
            strchr(&l, atoi(x));
            }
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 51:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, scanf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 52:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 53:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, printf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 54:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, printf(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 55:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&l, remove(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 56:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
scanf(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 57:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
strchr(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 58:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
strrchr(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 59:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
strrchr(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 60:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
strchr(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 96
Batcher Size:45
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
scanf(&l, atoi(x));


BasicTester, a patch instance with id 61:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
scanf(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 96
Counter: 97
Batcher Size:46
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
scanf(&l, atoi(x));


BasicTester, a patch instance with id 62:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
scanf(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 97
Counter: 98
Batcher Size:47
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
wctomb(&l, atoi(x));


BasicTester, a patch instance with id 63:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
wctomb(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 98
Counter: 99
Batcher Size:48
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
__overflow(&l, atoi(x));


BasicTester, a patch instance with id 64:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
__overflow(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 99
Counter: 100
Batcher Size:49
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
printf(&l, atoi(x));


BasicTester, a patch instance with id 65:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 100
Counter: 101
Batcher Size:50
Preprocess the following candidate with BasicTester:
Priority 4994
At location prog.c:61
--Src File: prog.c
Fragment 0:
printf(&l, atoi(x));


BasicTester, a patch instance with id 66:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
printf(&l, atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 101
Counter: 102
Batcher Size:51
Preprocess the following candidate with CondTester:
Priority 4993
At location prog.c:72
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    return 2;
return 0;


CondTester, a patch instance with id 33:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 102
Counter: 103
Batcher Size:52
Preprocess the following candidate with CondTester:
Priority 4993
At location prog.c:72
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    return 0;
return 0;


CondTester, a patch instance with id 34:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 103
Counter: 104
Batcher Size:53
Preprocess the following candidate with CondTester:
Priority 4993
At location prog.c:72
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    return 0;


CondTester, a patch instance with id 35:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if (!(__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 104
Counter: 105
Batcher Size:54
Preprocess the following candidate with CondTester:
Priority 4993
At location prog.c:72
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    return 20;
return 0;


CondTester, a patch instance with id 36:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 105
Counter: 106
Batcher Size:55
Preprocess the following candidate with CondTester:
Priority 4993
At location prog.c:72
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    return 1;
return 0;


CondTester, a patch instance with id 37:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 106
Counter: 107
Batcher Size:56
Preprocess the following candidate with CondTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    return 0;
printf(" %d", l->size);


CondTester, a patch instance with id 38:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 107
Counter: 108
Batcher Size:57
Preprocess the following candidate with CondTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    return 2;
printf(" %d", l->size);


CondTester, a patch instance with id 39:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 108
Counter: 109
Batcher Size:58
Preprocess the following candidate with CondTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    return 20;
printf(" %d", l->size);


CondTester, a patch instance with id 40:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 109
Counter: 110
Batcher Size:59
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
scanf(" %d", l->size);


BasicTester, a patch instance with id 67:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
scanf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 110
Counter: 111
Batcher Size:60
Preprocess the following candidate with CondTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    return 1;
printf(" %d", l->size);


CondTester, a patch instance with id 41:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 111
Counter: 112
Batcher Size:61
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
strchr(" %d", l->size);


BasicTester, a patch instance with id 68:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
strchr(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 112
Counter: 113
Batcher Size:62
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
insertSort(" %d", l->size);


BasicTester, a patch instance with id 69:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
insertSort(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 113
Counter: 114
Batcher Size:63
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
memset(l, 0, sizeof (*(l)));
printf(" %d", l->size);


BasicTester, a patch instance with id 70:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
memset(l, 0, sizeof (*(l)));
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 114
Counter: 115
Batcher Size:64
Preprocess the following candidate with CondTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, l->size, node, l->head, f, argv, argc)))
    printf(" %d", l->size);


CondTester, a patch instance with id 42:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if (!(__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 115
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    //prophet generated patch
    if (__get_mutant()==0) {
    printf((" %##uni*##"), l->size);
    }
    else if (__get_mutant()==1) {
    if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 0;
    printf(" %d", l->size);
    }
    else if (__get_mutant()==2) {
    if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 2;
    printf(" %d", l->size);
    }
    else if (__get_mutant()==3) {
    if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 20;
    printf(" %d", l->size);
    }
    else if (__get_mutant()==4) {
    scanf(" %d", l->size);
    }
    else if (__get_mutant()==5) {
    if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 1;
    printf(" %d", l->size);
    }
    else if (__get_mutant()==6) {
    strchr(" %d", l->size);
    }
    else if (__get_mutant()==7) {
    insertSort(" %d", l->size);
    }
    else if (__get_mutant()==8) {
    memset(l, 0, sizeof (*(l)));
    printf(" %d", l->size);
    }
    else if (__get_mutant()==9) {
    if (!(__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        printf(" %d", l->size);
    }
    return 0;


}

Merged code building succ, going to invoke tester!
StringConstTester, Testing instance id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf((" %##uni*##"), l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 38:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 39:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 40:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
BasicTester, Testing instance id 67:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
scanf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 41:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
BasicTester, Testing instance id 68:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
strchr(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 69:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
insertSort(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 70:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
memset(l, 0, sizeof (*(l)));
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 42:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if (!(__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
Counter: 116
Batcher Size:55
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
strrchr(" %d", l->size);


BasicTester, a patch instance with id 71:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
strrchr(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 116
Counter: 117
Batcher Size:56
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
strrchr(" %d", l->size);


BasicTester, a patch instance with id 72:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
strrchr(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 117
Counter: 118
Batcher Size:57
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
scanf(" %d", l->size);


BasicTester, a patch instance with id 73:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
scanf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 118
Counter: 119
Batcher Size:58
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
wctomb(" %d", l->size);


BasicTester, a patch instance with id 74:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
wctomb(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 119
Counter: 120
Batcher Size:59
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
strchr(" %d", l->size);


BasicTester, a patch instance with id 75:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
strchr(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 120
Counter: 121
Batcher Size:60
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
scanf(" %d", l->size);


BasicTester, a patch instance with id 76:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
scanf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 121
Counter: 122
Batcher Size:61
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
__overflow(" %d", l->size);


BasicTester, a patch instance with id 77:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
__overflow(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 122
Counter: 123
Batcher Size:62
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
printf(" %d", l->size);


BasicTester, a patch instance with id 78:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 123
Counter: 124
Batcher Size:63
Preprocess the following candidate with BasicTester:
Priority 4992
At location prog.c:71
--Src File: prog.c
Fragment 0:
insertSort(" %d", l->size);


BasicTester, a patch instance with id 79:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
insertSort(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 124
Counter: 125
Batcher Size:64
Preprocess the following candidate with CondTester:
Priority 4991
At location prog.c:67
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, node, node->next, l->head, node->next->element, f, l->size, argv, argc, node->next->next, node->element)))
    return 0;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


CondTester, a patch instance with id 43:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 0;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 125
Counter: 126
Batcher Size:65
Preprocess the following candidate with CondTester:
Priority 4991
At location prog.c:67
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, node, node->next, l->head, node->next->element, f, l->size, argv, argc, node->next->next, node->element)))
    return 1;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


CondTester, a patch instance with id 44:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 1;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 126
Counter: 127
Batcher Size:66
Preprocess the following candidate with CondTester:
Priority 4991
At location prog.c:67
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, node, node->next, l->head, node->next->element, f, l->size, argv, argc, node->next->next, node->element)))
    return 20;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


CondTester, a patch instance with id 45:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 20;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 127
Counter: 128
Batcher Size:67
Preprocess the following candidate with CondTester:
Priority 4991
At location prog.c:67
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, node, node->next, l->head, node->next->element, f, l->size, argv, argc, node->next->next, node->element)))
    return 2;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


CondTester, a patch instance with id 46:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 2;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 128
Counter: 129
Batcher Size:68
Preprocess the following candidate with CondTester:
Priority 4991
At location prog.c:67
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, node, node->next, l->head, node->next->element, f, l->size, argv, argc, node->next->next, node->element)))
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }


CondTester, a patch instance with id 47:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if (!(__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 129
Counter: 130
Batcher Size:69
Preprocess the following candidate with BasicTester:
Priority 4991
At location prog.c:67
--Src File: prog.c
Fragment 0:
memset(node->next, 0, sizeof (*(node->next)));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 80:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
memset(node->next, 0, sizeof (*(node->next)));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 130
Counter: 131
Batcher Size:70
Preprocess the following candidate with BasicTester:
Priority 4991
At location prog.c:67
--Src File: prog.c
Fragment 0:
memset(node, 0, sizeof (*(node)));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 81:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
memset(node, 0, sizeof (*(node)));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 131
Counter: 132
Batcher Size:71
Preprocess the following candidate with BasicTester:
Priority 4991
At location prog.c:67
--Src File: prog.c
Fragment 0:
memset(l, 0, sizeof (*(l)));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 82:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
memset(l, 0, sizeof (*(l)));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 132
Counter: 133
Batcher Size:72
Preprocess the following candidate with CondTester:
Priority 4990
At location prog.c:66
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, node, l->head, node->next, f, node->next->element, l->size, argv, argc, node->next->next, node->element)))
    return 1;
node = l->head;


CondTester, a patch instance with id 48:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(l->head), sizeof (l->head), &(node->next), sizeof (node->next), &(f), sizeof (f), &(node->next->element), sizeof (node->next->element), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 1;
node = l->head;

//CodeSeg 1:
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 133
Counter: 134
Batcher Size:73
Preprocess the following candidate with CondTester:
Priority 4990
At location prog.c:66
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, node, l->head, node->next, f, node->next->element, l->size, argv, argc, node->next->next, node->element)))
    return 2;
node = l->head;


CondTester, a patch instance with id 49:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(l->head), sizeof (l->head), &(node->next), sizeof (node->next), &(f), sizeof (f), &(node->next->element), sizeof (node->next->element), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 2;
node = l->head;

//CodeSeg 1:
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 134
Counter: 135
Batcher Size:74
Preprocess the following candidate with CondTester:
Priority 4990
At location prog.c:66
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, node, l->head, node->next, f, node->next->element, l->size, argv, argc, node->next->next, node->element)))
    return 20;
node = l->head;


CondTester, a patch instance with id 50:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(l->head), sizeof (l->head), &(node->next), sizeof (node->next), &(f), sizeof (f), &(node->next->element), sizeof (node->next->element), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 20;
node = l->head;

//CodeSeg 1:
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 135
Counter: 136
Batcher Size:75
Preprocess the following candidate with BasicTester:
Priority 4990
At location prog.c:66
--Src File: prog.c
Fragment 0:
memset(l, 0, sizeof (*(l)));
node = l->head;


BasicTester, a patch instance with id 83:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    
//Patch 0:
memset(l, 0, sizeof (*(l)));
node = l->head;

//CodeSeg 1:
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 136
Counter: 137
Batcher Size:76
Preprocess the following candidate with CondTester:
Priority 4990
At location prog.c:66
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, node, l->head, node->next, f, node->next->element, l->size, argv, argc, node->next->next, node->element)))
    node = l->head;


CondTester, a patch instance with id 51:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    
//Patch 0:
if (!(__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(l->head), sizeof (l->head), &(node->next), sizeof (node->next), &(f), sizeof (f), &(node->next->element), sizeof (node->next->element), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    node = l->head;

//CodeSeg 1:
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 137
Counter: 138
Batcher Size:77
Preprocess the following candidate with BasicTester:
Priority 4990
At location prog.c:66
--Src File: prog.c
Fragment 0:
memset(node, 0, sizeof (*(node)));
node = l->head;


BasicTester, a patch instance with id 84:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    
//Patch 0:
memset(node, 0, sizeof (*(node)));
node = l->head;

//CodeSeg 1:
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 138
Counter: 139
Batcher Size:78
Preprocess the following candidate with CondTester:
Priority 4990
At location prog.c:66
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, node, l->head, node->next, f, node->next->element, l->size, argv, argc, node->next->next, node->element)))
    return 0;
node = l->head;


CondTester, a patch instance with id 52:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(l->head), sizeof (l->head), &(node->next), sizeof (node->next), &(f), sizeof (f), &(node->next->element), sizeof (node->next->element), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 0;
node = l->head;

//CodeSeg 1:
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 139
Counter: 140
Batcher Size:79
Preprocess the following candidate with CondTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, node, argv, argc)))
    return 20;
fclose(f);


CondTester, a patch instance with id 53:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 140
Counter: 141
Batcher Size:80
Preprocess the following candidate with CondTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, node, argv, argc)))
    return 0;
fclose(f);


CondTester, a patch instance with id 54:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 141
Counter: 142
Batcher Size:81
Preprocess the following candidate with CondTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, node, argv, argc)))
    return 1;
fclose(f);


CondTester, a patch instance with id 55:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 142
Counter: 143
Batcher Size:82
Preprocess the following candidate with CondTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, node, argv, argc)))
    return 2;
fclose(f);


CondTester, a patch instance with id 56:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 143
Counter: 144
Batcher Size:83
Preprocess the following candidate with CondTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(f, l, node, argv, argc)))
    fclose(f);


CondTester, a patch instance with id 57:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if (!(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 144
Counter: 145
Batcher Size:84
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
fflush(f);


BasicTester, a patch instance with id 85:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
fflush(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 145
Counter: 146
Batcher Size:85
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
rewind(f);


BasicTester, a patch instance with id 86:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
rewind(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 146
Counter: 147
Batcher Size:86
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
feof(f);


BasicTester, a patch instance with id 87:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
feof(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 147
Counter: 148
Batcher Size:87
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
ferror(f);


BasicTester, a patch instance with id 88:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
ferror(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 148
Counter: 149
Batcher Size:88
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
clearerr(f);


BasicTester, a patch instance with id 89:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
clearerr(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 149
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 20;
    fclose(f);
    }
    else if (__get_mutant()==1) {
    if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 0;
    fclose(f);
    }
    else if (__get_mutant()==2) {
    if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 1;
    fclose(f);
    }
    else if (__get_mutant()==3) {
    if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 2;
    fclose(f);
    }
    else if (__get_mutant()==4) {
    if (!(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        fclose(f);
    }
    else if (__get_mutant()==5) {
    fflush(f);
    }
    else if (__get_mutant()==6) {
    rewind(f);
    }
    else if (__get_mutant()==7) {
    feof(f);
    }
    else if (__get_mutant()==8) {
    ferror(f);
    }
    else if (__get_mutant()==9) {
    clearerr(f);
    }

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 53:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 54:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 55:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 56:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 57:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
if (!(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(node), sizeof (node), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    fclose(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
BasicTester, Testing instance id 85:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
fflush(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 86:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
rewind(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 87:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
feof(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 88:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
ferror(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 89:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
clearerr(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 150
Batcher Size:79
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
fgetc(f);


BasicTester, a patch instance with id 90:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
fgetc(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 150
Counter: 151
Batcher Size:80
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
getc(f);


BasicTester, a patch instance with id 91:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
getc(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 151
Counter: 152
Batcher Size:81
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
ftell(f);


BasicTester, a patch instance with id 92:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
ftell(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 152
Counter: 153
Batcher Size:82
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
_IO_ftrylockfile(f);


BasicTester, a patch instance with id 93:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_ftrylockfile(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 153
Counter: 154
Batcher Size:83
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
_IO_free_backup_area(f);


BasicTester, a patch instance with id 94:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_free_backup_area(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 154
Counter: 155
Batcher Size:84
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
_IO_flockfile(f);


BasicTester, a patch instance with id 95:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_flockfile(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 155
Counter: 156
Batcher Size:85
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
_IO_funlockfile(f);


BasicTester, a patch instance with id 96:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_funlockfile(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 156
Counter: 157
Batcher Size:86
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
_IO_getc(f);


BasicTester, a patch instance with id 97:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_getc(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 157
Counter: 158
Batcher Size:87
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
_IO_ferror(f);


BasicTester, a patch instance with id 98:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_ferror(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 158
Counter: 159
Batcher Size:88
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
_IO_peekc_locked(f);


BasicTester, a patch instance with id 99:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_peekc_locked(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 159
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    //prophet generated patch
    if (__get_mutant()==0) {
    fgetc(f);
    }
    else if (__get_mutant()==1) {
    getc(f);
    }
    else if (__get_mutant()==2) {
    ftell(f);
    }
    else if (__get_mutant()==3) {
    _IO_ftrylockfile(f);
    }
    else if (__get_mutant()==4) {
    _IO_free_backup_area(f);
    }
    else if (__get_mutant()==5) {
    _IO_flockfile(f);
    }
    else if (__get_mutant()==6) {
    _IO_funlockfile(f);
    }
    else if (__get_mutant()==7) {
    _IO_getc(f);
    }
    else if (__get_mutant()==8) {
    _IO_ferror(f);
    }
    else if (__get_mutant()==9) {
    _IO_peekc_locked(f);
    }

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 90:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
fgetc(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 91:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
getc(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 92:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
ftell(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 93:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_ftrylockfile(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 94:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_free_backup_area(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 95:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_flockfile(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 96:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_funlockfile(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 97:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_getc(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 98:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_ferror(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 99:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_peekc_locked(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 160
Batcher Size:79
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
_IO_feof(f);


BasicTester, a patch instance with id 100:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
_IO_feof(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 160
Counter: 161
Batcher Size:80
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
__underflow(f);


BasicTester, a patch instance with id 101:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
__underflow(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 161
Counter: 162
Batcher Size:81
Preprocess the following candidate with BasicTester:
Priority 4989
At location prog.c:64
--Src File: prog.c
Fragment 0:
__uflow(f);


BasicTester, a patch instance with id 102:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
__uflow(f);

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 162
Counter: 163
Batcher Size:82
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
newList(&l);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 103:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
newList(&l);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 163
Counter: 164
Batcher Size:83
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
node = (l)->head;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 104:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
node = (l)->head;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 164
Counter: 165
Batcher Size:84
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
node = (node);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 105:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
node = (node);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 165
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        //prophet generated patch
        if (__get_mutant()==0) {
        if ((x[0] != '"') && !(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc)))) {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==1) {
        if ((x[0] != '"') || (__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc)))) {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==2) {
        if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
            return 0;
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==3) {
        if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
            return 1;
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==4) {
        if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
            return 2;
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==5) {
        if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
            return 20;
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==6) {
        if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
            break;
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==7) {
        newList(&l);
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==8) {
        node = (l)->head;
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==9) {
        node = (node);
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((x[0] != '"') && !(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc)))) {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
CondTester, Testing instance id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((x[0] != '"') || (__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc)))) {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
CondTester, Testing instance id 18:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    return 0;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 2
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 3
Branch 0: 0
Branch 1: 1
Iteration 4
Branch 0: 1
CondTester, Testing instance id 19:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    return 1;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 2
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 3
Branch 0: 0
Branch 1: 1
Iteration 4
Branch 0: 1
CondTester, Testing instance id 20:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    return 2;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 2
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 3
Branch 0: 0
Branch 1: 1
Iteration 4
Branch 0: 1
CondTester, Testing instance id 21:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    return 20;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 2
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 3
Branch 0: 0
Branch 1: 1
Iteration 4
Branch 0: 1
CondTester, Testing instance id 22:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    break;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 2
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 3
Branch 0: 0
Branch 1: 1
Iteration 4
Branch 0: 1
BasicTester, Testing instance id 103:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
newList(&l);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 104:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
node = (l)->head;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 105:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
node = (node);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 166
Batcher Size:75
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
newNode(&(node));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 106:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
newNode(&(node));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 166
Counter: 167
Batcher Size:76
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 107:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 167
Counter: 168
Batcher Size:77
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
insertSort(&l, atoi(x));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 108:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
insertSort(&l, atoi(x));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 168
Counter: 169
Batcher Size:78
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
newList(&(l));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 109:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
newList(&(l));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 169
Counter: 170
Batcher Size:79
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
insertSort(&(l), atoi(x));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 110:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
insertSort(&(l), atoi(x));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 170
Counter: 171
Batcher Size:80
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
fclose((f));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 111:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
fclose((f));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 171
Counter: 172
Batcher Size:81
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if (argc < 2)
    return 0;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 112:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if (argc < 2)
    return 0;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 172
Counter: 173
Batcher Size:82
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if (f == ((void *)0))
    return 0;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 113:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if (f == ((void *)0))
    return 0;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 173
Counter: 174
Batcher Size:83
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
fclose(f);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 114:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
fclose(f);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 174
Counter: 175
Batcher Size:84
Preprocess the following candidate with CondTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(f, l, argv, node, argc)))
    if (x[0] != '"') {
        insertSort(&l, atoi(x));
    }


CondTester, a patch instance with id 58:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if (!(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    if (x[0] != '"') {
        insertSort(&l, atoi(x));
    }

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 175
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        //prophet generated patch
        if (__get_mutant()==0) {
        newNode(&(node));
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==1) {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==2) {
        insertSort(&l, atoi(x));
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==3) {
        newList(&(l));
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==4) {
        insertSort(&(l), atoi(x));
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==5) {
        fclose((f));
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==6) {
        if (argc < 2)
            return 0;
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==7) {
        if (f == ((void *)0))
            return 0;
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==8) {
        fclose(f);
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
        }
        else if (__get_mutant()==9) {
        if (!(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
            if (x[0] != '"') {
                insertSort(&l, atoi(x));
            }
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 106:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
newNode(&(node));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 107:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 108:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
insertSort(&l, atoi(x));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 109:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
newList(&(l));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 110:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
insertSort(&(l), atoi(x));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 111:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
fclose((f));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 112:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if (argc < 2)
    return 0;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 113:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if (f == ((void *)0))
    return 0;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 114:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
fclose(f);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 58:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if (!(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))))
    if (x[0] != '"') {
        insertSort(&l, atoi(x));
    }

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 2
Branch 0: 0
Branch 1: 0
Branch 2: 1
Branch 3: 0
Iteration 3
Branch 0: 0
Branch 1: 0
Branch 2: 1
Branch 3: 1
Iteration 4
Branch 0: 0
Branch 1: 1
Branch 2: 0
Branch 3: 0
Iteration 5
Branch 0: 0
Branch 1: 1
Branch 2: 0
Branch 3: 1
Iteration 6
Branch 0: 0
Branch 1: 1
Branch 2: 1
Branch 3: 0
Iteration 7
Branch 0: 0
Branch 1: 1
Branch 2: 1
Branch 3: 1
Iteration 8
Branch 0: 1
Branch 1: 0
Branch 2: 0
Branch 3: 0
Iteration 9
Branch 0: 1
Branch 1: 0
Branch 2: 0
Branch 3: 1
Counter: 176
Batcher Size:75
Preprocess the following candidate with CondTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(f, l, argv, node, argc)) && (x[0] != '"')) {
    insertSort(&l, atoi(x));
}


CondTester, a patch instance with id 59:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
if (!(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(node), sizeof (node), &(argc), sizeof (argc))) && (x[0] != '"')) {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 176
Counter: 177
Batcher Size:76
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
memset(l, 0, sizeof (*(l)));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 115:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
memset(l, 0, sizeof (*(l)));
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 177
Counter: 178
Batcher Size:77
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
node = (node)->next;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 116:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
node = (node)->next;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 178
Counter: 179
Batcher Size:78
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
printf(" %d", l->size);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 117:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
printf(" %d", l->size);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 179
Counter: 180
Batcher Size:79
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
printf("%d ", node->next->element);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 118:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
printf("%d ", node->next->element);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 180
Counter: 181
Batcher Size:80
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
printf("%d ", (node)->next->element);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 119:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
printf("%d ", (node)->next->element);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 181
Counter: 182
Batcher Size:81
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
node = l->head;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 120:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
node = l->head;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 182
Counter: 183
Batcher Size:82
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
node = node->next;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 121:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
node = node->next;
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 183
Counter: 184
Batcher Size:83
Preprocess the following candidate with BasicTester:
Priority 4988
At location prog.c:59
--Src File: prog.c
Fragment 0:
printf(" %d", (l)->size);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}


BasicTester, a patch instance with id 122:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        
//Patch 0:
printf(" %d", (l)->size);
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}

//CodeSeg 1:
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 184
Counter: 185
Batcher Size:84
Preprocess the following candidate with CondTester:
Priority 4987
At location prog.c:30
--Src File: prog.c
Fragment 0:
if ((__abst_hole(n, (*n)->next, (*n)->element)))
    return;
(*n)->next = ((void *)0);


CondTester, a patch instance with id 60:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    
//Patch 0:
if ((__is_neg(3, &(n), sizeof (n), &((*n)->next), sizeof ((*n)->next), &((*n)->element), sizeof ((*n)->element))))
    return;
(*n)->next = ((void *)0);

//CodeSeg 1:
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 185
Counter: 186
Batcher Size:85
Preprocess the following candidate with CondTester:
Priority 4987
At location prog.c:30
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(n, (*n)->next, (*n)->element)))
    (*n)->next = ((void *)0);


CondTester, a patch instance with id 61:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    
//Patch 0:
if (!(__is_neg(3, &(n), sizeof (n), &((*n)->next), sizeof ((*n)->next), &((*n)->element), sizeof ((*n)->element))))
    (*n)->next = ((void *)0);

//CodeSeg 1:
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 186
Counter: 187
Batcher Size:86
Preprocess the following candidate with BasicTester:
Priority 4987
At location prog.c:30
--Src File: prog.c
Fragment 0:
memset((*n), 0, sizeof (*((*n))));
(*n)->next = ((void *)0);


BasicTester, a patch instance with id 123:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    
//Patch 0:
memset((*n), 0, sizeof (*((*n))));
(*n)->next = ((void *)0);

//CodeSeg 1:
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 187
Counter: 188
Batcher Size:87
Preprocess the following candidate with CondTester:
Priority 4986
At location prog.c:28
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(n)))
    *n = malloc(sizeof(struct Entry));


CondTester, a patch instance with id 62:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
if (!(__is_neg(1, &(n), sizeof (n))))
    *n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 188
Counter: 189
Batcher Size:88
Preprocess the following candidate with BasicTester:
Priority 4986
At location prog.c:28
--Src File: prog.c
Fragment 0:
*n = malloc(sizeof(struct Entry));


BasicTester, a patch instance with id 124:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
*n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 189
Counter: 190
Batcher Size:89
Preprocess the following candidate with CondTester:
Priority 4985
At location prog.c:58
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, argc, node)))
    return 20;
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }


CondTester, a patch instance with id 63:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node), sizeof (node))))
    return 20;
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }

//CodeSeg 1:
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 190
Counter: 191
Batcher Size:90
Preprocess the following candidate with CondTester:
Priority 4985
At location prog.c:58
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, argc, node)))
    return 2;
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }


CondTester, a patch instance with id 64:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node), sizeof (node))))
    return 2;
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }

//CodeSeg 1:
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 191
Counter: 192
Batcher Size:91
Preprocess the following candidate with CondTester:
Priority 4985
At location prog.c:58
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(f, l, argv, argc, node)))
    while (fscanf(f, "%s", x) == 1)
        {
            if (x[0] != '"') {
                insertSort(&l, atoi(x));
            }
        }


CondTester, a patch instance with id 65:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    
//Patch 0:
if (!(__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node), sizeof (node))))
    while (fscanf(f, "%s", x) == 1)
        {
            if (x[0] != '"') {
                insertSort(&l, atoi(x));
            }
        }

//CodeSeg 1:
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 192
Counter: 193
Batcher Size:92
Preprocess the following candidate with BasicTester:
Priority 4985
At location prog.c:58
--Src File: prog.c
Fragment 0:
memset(l, 0, sizeof (*(l)));
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }


BasicTester, a patch instance with id 125:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    
//Patch 0:
memset(l, 0, sizeof (*(l)));
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }

//CodeSeg 1:
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 193
Counter: 194
Batcher Size:93
Preprocess the following candidate with CondTester:
Priority 4985
At location prog.c:58
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, argc, node)))
    return 1;
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }


CondTester, a patch instance with id 66:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node), sizeof (node))))
    return 1;
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }

//CodeSeg 1:
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 194
Counter: 195
Batcher Size:94
Preprocess the following candidate with CondTester:
Priority 4985
At location prog.c:58
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, argc, node)))
    return 0;
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }


CondTester, a patch instance with id 67:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    
//Patch 0:
if ((__is_neg(5, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node), sizeof (node))))
    return 0;
while (fscanf(f, "%s", x) == 1)
    {
        if (x[0] != '"') {
            insertSort(&l, atoi(x));
        }
    }

//CodeSeg 1:
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 195
Counter: 196
Batcher Size:95
Preprocess the following candidate with CondTester:
Priority 4984
At location prog.c:57
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, argc)))
    return 20;
struct Entry *node;


CondTester, a patch instance with id 68:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    
//Patch 0:
if ((__is_neg(4, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
struct Entry *node;

//CodeSeg 1:
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 196
Counter: 197
Batcher Size:96
Preprocess the following candidate with CondTester:
Priority 4984
At location prog.c:57
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, argc)))
    return 2;
struct Entry *node;


CondTester, a patch instance with id 69:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    
//Patch 0:
if ((__is_neg(4, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
struct Entry *node;

//CodeSeg 1:
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 197
Counter: 198
Batcher Size:97
Preprocess the following candidate with CondTester:
Priority 4984
At location prog.c:57
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, argc)))
    return 0;
struct Entry *node;


CondTester, a patch instance with id 70:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    
//Patch 0:
if ((__is_neg(4, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
struct Entry *node;

//CodeSeg 1:
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 198
Counter: 199
Batcher Size:98
Preprocess the following candidate with CondTester:
Priority 4984
At location prog.c:57
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, l, argv, argc)))
    return 1;
struct Entry *node;


CondTester, a patch instance with id 71:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    
//Patch 0:
if ((__is_neg(4, &(f), sizeof (f), &(l), sizeof (l), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
struct Entry *node;

//CodeSeg 1:
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 199
Counter: 200
Batcher Size:99
Preprocess the following candidate with CondTester:
Priority 4983
At location prog.c:56
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, argv, argc, l->head, l->size)))
    return 20;
char x[20];


CondTester, a patch instance with id 72:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 20;
char x[20];

//CodeSeg 1:
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 200
CondTester, Testing instance id 72:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 20;
char x[20];

//CodeSeg 1:
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
Counter: 201
Batcher Size:99
Preprocess the following candidate with CondTester:
Priority 4983
At location prog.c:56
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, argv, argc, l->head, l->size)))
    return 1;
char x[20];


CondTester, a patch instance with id 73:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 1;
char x[20];

//CodeSeg 1:
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 201
CondTester, Testing instance id 73:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 1;
char x[20];

//CodeSeg 1:
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
Counter: 202
Batcher Size:99
Preprocess the following candidate with CondTester:
Priority 4983
At location prog.c:56
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, argv, argc, l->head, l->size)))
    return 2;
char x[20];


CondTester, a patch instance with id 74:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 2;
char x[20];

//CodeSeg 1:
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 202
CondTester, Testing instance id 74:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 2;
char x[20];

//CodeSeg 1:
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
Counter: 203
Batcher Size:99
Preprocess the following candidate with CondTester:
Priority 4983
At location prog.c:56
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, argv, argc, l->head, l->size)))
    return 0;
char x[20];


CondTester, a patch instance with id 75:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 0;
char x[20];

//CodeSeg 1:
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 203
CondTester, Testing instance id 75:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 0;
char x[20];

//CodeSeg 1:
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
Counter: 204
Batcher Size:99
Preprocess the following candidate with CondTester:
Priority 4982
At location prog.c:24
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, (*l)->head->next, (*l)->head, (*l)->head->element, (*l)->size)))
    return;


CondTester, a patch instance with id 76:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    
//Patch 0:
if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;

//CodeSeg 1:
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 204
Counter: 205
Batcher Size:100
Preprocess the following candidate with CondTester:
Priority 4982
At location prog.c:24
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, (*l)->head->next, (*l)->head, (*l)->head->element, (*l)->size)))
    return;
return;


CondTester, a patch instance with id 77:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    
//Patch 0:
if ((__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;
return;

//CodeSeg 1:
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 205
Counter: 206
Batcher Size:101
Preprocess the following candidate with CondTester:
Priority 4981
At location prog.c:23
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, (*l)->head->next, (*l)->head, (*l)->head->element, (*l)->size)))
    return;
(*l)->head->next = (*l)->head;


CondTester, a patch instance with id 78:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
if ((__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;
(*l)->head->next = (*l)->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 206
Counter: 207
Batcher Size:102
Preprocess the following candidate with BasicTester:
Priority 4981
At location prog.c:23
--Src File: prog.c
Fragment 0:
memset((*l)->head, 0, sizeof (*((*l)->head)));
(*l)->head->next = (*l)->head;


BasicTester, a patch instance with id 126:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
memset((*l)->head, 0, sizeof (*((*l)->head)));
(*l)->head->next = (*l)->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 207
Counter: 208
Batcher Size:103
Preprocess the following candidate with BasicTester:
Priority 4981
At location prog.c:23
--Src File: prog.c
Fragment 0:
memset((*l), 0, sizeof (*((*l))));
(*l)->head->next = (*l)->head;


BasicTester, a patch instance with id 127:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
memset((*l), 0, sizeof (*((*l))));
(*l)->head->next = (*l)->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 208
Counter: 209
Batcher Size:104
Preprocess the following candidate with CondTester:
Priority 4981
At location prog.c:23
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, (*l)->head->next, (*l)->head, (*l)->head->element, (*l)->size)))
    (*l)->head->next = (*l)->head;


CondTester, a patch instance with id 79:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    (*l)->head->next = (*l)->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 209
Counter: 210
Batcher Size:105
Preprocess the following candidate with CondTester:
Priority 4980
At location prog.c:22
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, (*l)->head, (*l)->head->next, (*l)->head->element, (*l)->size)))
    newNode(&((*l)->head));


CondTester, a patch instance with id 80:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 210
Counter: 211
Batcher Size:106
Preprocess the following candidate with BasicTester:
Priority 4980
At location prog.c:22
--Src File: prog.c
Fragment 0:
memset((*l)->head, 0, sizeof (*((*l)->head)));
newNode(&((*l)->head));


BasicTester, a patch instance with id 128:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
memset((*l)->head, 0, sizeof (*((*l)->head)));
newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 211
Counter: 212
Batcher Size:107
Preprocess the following candidate with BasicTester:
Priority 4980
At location prog.c:22
--Src File: prog.c
Fragment 0:
newNode(&((*l)->head));


BasicTester, a patch instance with id 129:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 212
Counter: 213
Batcher Size:108
Preprocess the following candidate with CondTester:
Priority 4980
At location prog.c:22
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, (*l)->head, (*l)->head->next, (*l)->head->element, (*l)->size)))
    return;
newNode(&((*l)->head));


CondTester, a patch instance with id 81:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
if ((__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;
newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 213
Counter: 214
Batcher Size:109
Preprocess the following candidate with BasicTester:
Priority 4980
At location prog.c:22
--Src File: prog.c
Fragment 0:
memset((*l), 0, sizeof (*((*l))));
newNode(&((*l)->head));


BasicTester, a patch instance with id 130:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
memset((*l), 0, sizeof (*((*l))));
newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 214
Counter: 215
Batcher Size:110
Preprocess the following candidate with BasicTester:
Priority 4979
At location prog.c:21
--Src File: prog.c
Fragment 0:
*l = malloc(sizeof(struct List));


BasicTester, a patch instance with id 131:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 215
Counter: 216
Batcher Size:111
Preprocess the following candidate with CondTester:
Priority 4979
At location prog.c:21
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, (*l)->head, (*l)->head->next, (*l)->head->element, (*l)->size)))
    *l = malloc(sizeof(struct List));


CondTester, a patch instance with id 82:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    *l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 216
Counter: 217
Batcher Size:112
Preprocess the following candidate with CondTester:
Priority 4978
At location prog.c:55
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, argv, argc, l->head, l->size)))
    return 20;
newList(&l);


CondTester, a patch instance with id 83:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 20;
newList(&l);

//CodeSeg 1:
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 217
Counter: 218
Batcher Size:113
Preprocess the following candidate with CondTester:
Priority 4978
At location prog.c:55
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, argv, argc, l->head, l->size)))
    return 1;
newList(&l);


CondTester, a patch instance with id 84:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 1;
newList(&l);

//CodeSeg 1:
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 218
Counter: 219
Batcher Size:114
Preprocess the following candidate with CondTester:
Priority 4978
At location prog.c:55
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, argv, argc, l->head, l->size)))
    return 2;
newList(&l);


CondTester, a patch instance with id 85:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 2;
newList(&l);

//CodeSeg 1:
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 219
Counter: 220
Batcher Size:115
Preprocess the following candidate with CondTester:
Priority 4978
At location prog.c:55
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, f, argv, argc, l->head, l->size)))
    return 0;
newList(&l);


CondTester, a patch instance with id 86:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    
//Patch 0:
if ((__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    return 0;
newList(&l);

//CodeSeg 1:
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 220
Counter: 221
Batcher Size:116
Preprocess the following candidate with BasicTester:
Priority 4978
At location prog.c:55
--Src File: prog.c
Fragment 0:
memset(l, 0, sizeof (*(l)));
newList(&l);


BasicTester, a patch instance with id 132:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    
//Patch 0:
memset(l, 0, sizeof (*(l)));
newList(&l);

//CodeSeg 1:
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 221
Counter: 222
Batcher Size:117
Preprocess the following candidate with CondTester:
Priority 4978
At location prog.c:55
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, f, argv, argc, l->head, l->size)))
    newList(&l);


CondTester, a patch instance with id 87:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    
//Patch 0:
if (!(__is_neg(6, &(l), sizeof (l), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc), &(l->head), sizeof (l->head), &(l->size), sizeof (l->size))))
    newList(&l);

//CodeSeg 1:
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 222
Counter: 223
Batcher Size:118
Preprocess the following candidate with BasicTester:
Priority 4978
At location prog.c:55
--Src File: prog.c
Fragment 0:
reverse(&l);


BasicTester, a patch instance with id 133:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    
//Patch 0:
reverse(&l);

//CodeSeg 1:
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 223
Counter: 224
Batcher Size:119
Preprocess the following candidate with BasicTester:
Priority 4978
At location prog.c:55
--Src File: prog.c
Fragment 0:
newList(&l);


BasicTester, a patch instance with id 134:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    
//Patch 0:
newList(&l);

//CodeSeg 1:
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 224
Counter: 225
Batcher Size:120
Preprocess the following candidate with CondTester:
Priority 4977
At location prog.c:54
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, argv, argc)))
    return 2;
struct List *l;


CondTester, a patch instance with id 88:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    
//Patch 0:
if ((__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
struct List *l;

//CodeSeg 1:
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 225
Counter: 226
Batcher Size:121
Preprocess the following candidate with CondTester:
Priority 4977
At location prog.c:54
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, argv, argc)))
    return 20;
struct List *l;


CondTester, a patch instance with id 89:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    
//Patch 0:
if ((__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
struct List *l;

//CodeSeg 1:
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 226
Counter: 227
Batcher Size:122
Preprocess the following candidate with CondTester:
Priority 4977
At location prog.c:54
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, argv, argc)))
    return 1;
struct List *l;


CondTester, a patch instance with id 90:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    
//Patch 0:
if ((__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
struct List *l;

//CodeSeg 1:
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 227
Counter: 228
Batcher Size:123
Preprocess the following candidate with CondTester:
Priority 4977
At location prog.c:54
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, argv, argc)))
    return 0;
struct List *l;


CondTester, a patch instance with id 91:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    
//Patch 0:
if ((__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
struct List *l;

//CodeSeg 1:
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 228
Counter: 229
Batcher Size:124
Preprocess the following candidate with CondTester:
Priority 4976
At location prog.c:53
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, argv, argc)))
    return 2;
if (f == ((void *)0))
    return 0;


CondTester, a patch instance with id 92:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    
//Patch 0:
if ((__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
if (f == ((void *)0))
    return 0;

//CodeSeg 1:
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 229
Counter: 230
Batcher Size:125
Preprocess the following candidate with CondTester:
Priority 4976
At location prog.c:53
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, argv, argc)))
    return 20;
if (f == ((void *)0))
    return 0;


CondTester, a patch instance with id 93:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    
//Patch 0:
if ((__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
if (f == ((void *)0))
    return 0;

//CodeSeg 1:
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 230
Counter: 231
Batcher Size:126
Preprocess the following candidate with CondTester:
Priority 4976
At location prog.c:53
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, argv, argc)))
    return 1;
if (f == ((void *)0))
    return 0;


CondTester, a patch instance with id 94:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    
//Patch 0:
if ((__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
if (f == ((void *)0))
    return 0;

//CodeSeg 1:
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 231
Counter: 232
Batcher Size:127
Preprocess the following candidate with CondTester:
Priority 4976
At location prog.c:53
--Src File: prog.c
Fragment 0:
if ((__abst_hole(f, argv, argc)))
    return 0;
if (f == ((void *)0))
    return 0;


CondTester, a patch instance with id 95:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    
//Patch 0:
if ((__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
if (f == ((void *)0))
    return 0;

//CodeSeg 1:
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 232
Counter: 233
Batcher Size:128
Preprocess the following candidate with CondTester:
Priority 4976
At location prog.c:53
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(f, argv, argc)))
    if (f == ((void *)0))
        return 0;


CondTester, a patch instance with id 96:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    
//Patch 0:
if (!(__is_neg(3, &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    if (f == ((void *)0))
        return 0;

//CodeSeg 1:
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 233
Counter: 234
Batcher Size:129
Preprocess the following candidate with CondTester:
Priority 4975
At location prog.c:52
--Src File: prog.c
Fragment 0:
if ((__abst_hole(argv, argc)))
    return 20;
FILE *f = fopen(argv[1], "r");


CondTester, a patch instance with id 97:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    
//Patch 0:
if ((__is_neg(2, &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
FILE *f = fopen(argv[1], "r");

//CodeSeg 1:
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 234
Counter: 235
Batcher Size:130
Preprocess the following candidate with CondTester:
Priority 4975
At location prog.c:52
--Src File: prog.c
Fragment 0:
if ((__abst_hole(argv, argc)))
    return 2;
FILE *f = fopen(argv[1], "r");


CondTester, a patch instance with id 98:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    
//Patch 0:
if ((__is_neg(2, &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
FILE *f = fopen(argv[1], "r");

//CodeSeg 1:
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 235
Counter: 236
Batcher Size:131
Preprocess the following candidate with CondTester:
Priority 4975
At location prog.c:52
--Src File: prog.c
Fragment 0:
if ((__abst_hole(argv, argc)))
    return 1;
FILE *f = fopen(argv[1], "r");


CondTester, a patch instance with id 99:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    
//Patch 0:
if ((__is_neg(2, &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
FILE *f = fopen(argv[1], "r");

//CodeSeg 1:
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 236
Counter: 237
Batcher Size:132
Preprocess the following candidate with CondTester:
Priority 4975
At location prog.c:52
--Src File: prog.c
Fragment 0:
if ((__abst_hole(argv, argc)))
    return 0;
FILE *f = fopen(argv[1], "r");


CondTester, a patch instance with id 100:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    
//Patch 0:
if ((__is_neg(2, &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
FILE *f = fopen(argv[1], "r");

//CodeSeg 1:
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 237
Counter: 238
Batcher Size:133
Preprocess the following candidate with CondTester:
Priority 4974
At location prog.c:51
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(argc, argv)))
    if (argc < 2)
        return 0;


CondTester, a patch instance with id 101:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    
//Patch 0:
if (!(__is_neg(2, &(argc), sizeof (argc), &(argv), sizeof (argv))))
    if (argc < 2)
        return 0;

//CodeSeg 1:
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 238
Counter: 239
Batcher Size:134
Preprocess the following candidate with BasicTester:
Priority 2500
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->next = (e)->next;


BasicTester, a patch instance with id 135:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (e)->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 239
Counter: 240
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority 2500
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->next = (in)->next;


BasicTester, a patch instance with id 136:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (in)->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 240
Counter: 241
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority 2500
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->next = (in);


BasicTester, a patch instance with id 137:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (in);

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 241
Counter: 242
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority 2500
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->next = (e);


BasicTester, a patch instance with id 138:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (e);

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 242
Counter: 243
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority 2497
At location prog.c:36
--Src File: prog.c
Fragment 0:
in->element = (v);


BasicTester, a patch instance with id 139:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = (v);

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 243
Counter: 244
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority 2497
At location prog.c:36
--Src File: prog.c
Fragment 0:
in->element = (0);


BasicTester, a patch instance with id 140:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = (0);

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 244
Counter: 245
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority 2496
At location prog.c:35
--Src File: prog.c
Fragment 0:
newNode(&(in));


BasicTester, a patch instance with id 141:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&(in));

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 245
Counter: 246
Batcher Size:141
Preprocess the following candidate with BasicTester:
Priority 2494
At location prog.c:61
--Src File: prog.c
Fragment 0:
insertSort(&(l), atoi(x));


BasicTester, a patch instance with id 142:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            
//Patch 0:
insertSort(&(l), atoi(x));

//CodeSeg 1:
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 246
Counter: 247
Batcher Size:142
Preprocess the following candidate with BasicTester:
Priority 2492
At location prog.c:71
--Src File: prog.c
Fragment 0:
printf(" %d", (l)->size);


BasicTester, a patch instance with id 143:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf(" %d", (l)->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 247
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    //prophet generated patch
    if (__get_mutant()==0) {
    strrchr(" %d", l->size);
    }
    else if (__get_mutant()==1) {
    strrchr(" %d", l->size);
    }
    else if (__get_mutant()==2) {
    scanf(" %d", l->size);
    }
    else if (__get_mutant()==3) {
    wctomb(" %d", l->size);
    }
    else if (__get_mutant()==4) {
    strchr(" %d", l->size);
    }
    else if (__get_mutant()==5) {
    scanf(" %d", l->size);
    }
    else if (__get_mutant()==6) {
    __overflow(" %d", l->size);
    }
    else if (__get_mutant()==7) {
    printf(" %d", l->size);
    }
    else if (__get_mutant()==8) {
    insertSort(" %d", l->size);
    }
    else if (__get_mutant()==9) {
    printf(" %d", (l)->size);
    }
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 71:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
strrchr(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 72:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
strrchr(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 73:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
scanf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 74:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
wctomb(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 75:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
strchr(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 76:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
scanf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 77:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
__overflow(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 78:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 79:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
insertSort(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 143:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf(" %d", (l)->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
Counter: 248
Batcher Size:133
Preprocess the following candidate with BasicTester:
Priority 2490
At location prog.c:66
--Src File: prog.c
Fragment 0:
node = (node);


BasicTester, a patch instance with id 144:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    
//Patch 0:
node = (node);

//CodeSeg 1:
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 248
Counter: 249
Batcher Size:134
Preprocess the following candidate with BasicTester:
Priority 2490
At location prog.c:66
--Src File: prog.c
Fragment 0:
node = (l)->head;


BasicTester, a patch instance with id 145:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    
//Patch 0:
node = (l)->head;

//CodeSeg 1:
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 249
Counter: 250
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority 2489
At location prog.c:64
--Src File: prog.c
Fragment 0:
fclose((f));


BasicTester, a patch instance with id 146:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    
//Patch 0:
fclose((f));

//CodeSeg 1:

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 250
Counter: 251
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority 2481
At location prog.c:23
--Src File: prog.c
Fragment 0:
(*l)->head->next = (*(l))->head;


BasicTester, a patch instance with id 147:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
(*l)->head->next = (*(l))->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 251
Counter: 252
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority 2480
At location prog.c:22
--Src File: prog.c
Fragment 0:
newNode(&((*(l))->head));


BasicTester, a patch instance with id 148:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
newNode(&((*(l))->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 252
Counter: 253
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority 2478
At location prog.c:55
--Src File: prog.c
Fragment 0:
newList(&(l));


BasicTester, a patch instance with id 149:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    
//Patch 0:
newList(&(l));

//CodeSeg 1:
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 253
Counter: 254
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->element = v;
in->next = e->next;


BasicTester, a patch instance with id 150:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->element = v;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 254
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    //prophet generated patch
    if (__get_mutant()==0) {
    memset(e, 0, sizeof (*(e)));
    in->next = e->next;
    }
    else if (__get_mutant()==1) {
    memset(in, 0, sizeof (*(in)));
    in->next = e->next;
    }
    else if (__get_mutant()==2) {
    if (!(__is_neg(10, &(in), sizeof (in), &(e), sizeof (e), &(in->next), sizeof (in->next), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(l), sizeof (l), &(in->element), sizeof (in->element), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
        in->next = e->next;
    }
    else if (__get_mutant()==3) {
    memset(e->next, 0, sizeof (*(e->next)));
    in->next = e->next;
    }
    else if (__get_mutant()==4) {
    if ((__is_neg(10, &(in), sizeof (in), &(e), sizeof (e), &(in->next), sizeof (in->next), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(l), sizeof (l), &(in->element), sizeof (in->element), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
        return;
    in->next = e->next;
    }
    else if (__get_mutant()==5) {
    in->next = (e)->next;
    }
    else if (__get_mutant()==6) {
    in->next = (in)->next;
    }
    else if (__get_mutant()==7) {
    in->next = (in);
    }
    else if (__get_mutant()==8) {
    in->next = (e);
    }
    else if (__get_mutant()==9) {
    in->element = v;
    in->next = e->next;
    }
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 17:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
memset(e, 0, sizeof (*(e)));
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 18:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
memset(in, 0, sizeof (*(in)));
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 23:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
if (!(__is_neg(10, &(in), sizeof (in), &(e), sizeof (e), &(in->next), sizeof (in->next), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(l), sizeof (l), &(in->element), sizeof (in->element), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
    in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
BasicTester, Testing instance id 19:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
memset(e->next, 0, sizeof (*(e->next)));
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 24:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
if ((__is_neg(10, &(in), sizeof (in), &(e), sizeof (e), &(in->next), sizeof (in->next), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(l), sizeof (l), &(in->element), sizeof (in->element), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
    return;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
BasicTester, Testing instance id 135:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (e)->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 136:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (in)->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 137:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (in);

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 138:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (e);

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 150:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->element = v;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 255
Batcher Size:130
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->element = (v);
in->next = e->next;


BasicTester, a patch instance with id 151:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->element = (v);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 255
Counter: 256
Batcher Size:131
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->element = (0);
in->next = e->next;


BasicTester, a patch instance with id 152:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->element = (0);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 256
Counter: 257
Batcher Size:132
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
e = e->next;
in->next = e->next;


BasicTester, a patch instance with id 153:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = e->next;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 257
Counter: 258
Batcher Size:133
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
e = (in)->next;
in->next = e->next;


BasicTester, a patch instance with id 154:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = (in)->next;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 258
Counter: 259
Batcher Size:134
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
e = (in);
in->next = e->next;


BasicTester, a patch instance with id 155:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = (in);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 259
Counter: 260
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
e = (e)->next;
in->next = e->next;


BasicTester, a patch instance with id 156:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = (e)->next;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 260
Counter: 261
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
e = (e);
in->next = e->next;


BasicTester, a patch instance with id 157:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = (e);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 261
Counter: 262
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
printf("%d ", (in)->next->element);
in->next = e->next;


BasicTester, a patch instance with id 158:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
printf("%d ", (in)->next->element);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 262
Counter: 263
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
printf("%d ", (e)->next->element);
in->next = e->next;


BasicTester, a patch instance with id 159:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
printf("%d ", (e)->next->element);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 263
Counter: 264
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
newNode(&in);
in->next = e->next;


BasicTester, a patch instance with id 160:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
newNode(&in);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 264
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    //prophet generated patch
    if (__get_mutant()==0) {
    in->element = (v);
    in->next = e->next;
    }
    else if (__get_mutant()==1) {
    in->element = (0);
    in->next = e->next;
    }
    else if (__get_mutant()==2) {
    e = e->next;
    in->next = e->next;
    }
    else if (__get_mutant()==3) {
    e = (in)->next;
    in->next = e->next;
    }
    else if (__get_mutant()==4) {
    e = (in);
    in->next = e->next;
    }
    else if (__get_mutant()==5) {
    e = (e)->next;
    in->next = e->next;
    }
    else if (__get_mutant()==6) {
    e = (e);
    in->next = e->next;
    }
    else if (__get_mutant()==7) {
    printf("%d ", (in)->next->element);
    in->next = e->next;
    }
    else if (__get_mutant()==8) {
    printf("%d ", (e)->next->element);
    in->next = e->next;
    }
    else if (__get_mutant()==9) {
    newNode(&in);
    in->next = e->next;
    }
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 151:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->element = (v);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 152:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->element = (0);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 153:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = e->next;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 154:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = (in)->next;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 155:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = (in);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 156:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = (e)->next;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 157:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
e = (e);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 158:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
printf("%d ", (in)->next->element);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 159:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
printf("%d ", (e)->next->element);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 160:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
newNode(&in);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 265
Batcher Size:130
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
newNode(&(in));
in->next = e->next;


BasicTester, a patch instance with id 161:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
newNode(&(in));
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 265
Counter: 266
Batcher Size:131
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
newNode(&(e));
in->next = e->next;


BasicTester, a patch instance with id 162:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
newNode(&(e));
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 266
Counter: 267
Batcher Size:132
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
newNode(&((*(l))->head));
in->next = e->next;


BasicTester, a patch instance with id 163:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
newNode(&((*(l))->head));
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 267
Counter: 268
Batcher Size:133
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->next = e->next;
in->next = e->next;


BasicTester, a patch instance with id 164:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = e->next;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 268
Counter: 269
Batcher Size:134
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->next = (in)->next;
in->next = e->next;


BasicTester, a patch instance with id 165:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (in)->next;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 269
Counter: 270
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->next = (in);
in->next = e->next;


BasicTester, a patch instance with id 166:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (in);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 270
Counter: 271
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->next = (e)->next;
in->next = e->next;


BasicTester, a patch instance with id 167:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (e)->next;
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 271
Counter: 272
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:44
--Src File: prog.c
Fragment 0:
in->next = (e);
in->next = e->next;


BasicTester, a patch instance with id 168:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    
//Patch 0:
in->next = (e);
in->next = e->next;

//CodeSeg 1:
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 272
Counter: 273
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
printf("%d ", (in)->next->element);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 169:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
printf("%d ", (in)->next->element);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 273
Counter: 274
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
printf("%d ", (e)->next->element);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 170:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
printf("%d ", (e)->next->element);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 274
Counter: 275
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
newNode(&in);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 171:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
newNode(&in);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 275
Counter: 276
Batcher Size:141
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
in->next = e->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 172:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = e->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 276
Counter: 277
Batcher Size:142
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
in->next = (in)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 173:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = (in)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 277
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(10, &(l), sizeof (l), &(e), sizeof (e), &((*l)->head), sizeof ((*l)->head), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(in), sizeof (in), &((*l)->size), sizeof ((*l)->size), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
        return;
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==1) {
    if (!(__is_neg(10, &(l), sizeof (l), &(e), sizeof (e), &((*l)->head), sizeof ((*l)->head), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(in), sizeof (in), &((*l)->size), sizeof ((*l)->size), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
        while (e->next != (*l)->head)
            {
                if (e->next->element < v)
                    e = e->next;
                else
                    break;
            }
    }
    else if (__get_mutant()==2) {
    memset((*l), 0, sizeof (*((*l))));
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==3) {
    memset(e->next, 0, sizeof (*(e->next)));
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==4) {
    memset(e, 0, sizeof (*(e)));
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==5) {
    printf("%d ", (in)->next->element);
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==6) {
    printf("%d ", (e)->next->element);
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==7) {
    newNode(&in);
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==8) {
    in->next = e->next;
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==9) {
    in->next = (in)->next;
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 25:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
if ((__is_neg(10, &(l), sizeof (l), &(e), sizeof (e), &((*l)->head), sizeof ((*l)->head), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(in), sizeof (in), &((*l)->size), sizeof ((*l)->size), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
    return;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
CondTester, Testing instance id 26:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
if (!(__is_neg(10, &(l), sizeof (l), &(e), sizeof (e), &((*l)->head), sizeof ((*l)->head), &(e->next), sizeof (e->next), &(v), sizeof (v), &(e->next->element), sizeof (e->next->element), &(in), sizeof (in), &((*l)->size), sizeof ((*l)->size), &(e->next->next), sizeof (e->next->next), &(e->element), sizeof (e->element))))
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
BasicTester, Testing instance id 20:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
memset((*l), 0, sizeof (*((*l))));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 21:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
memset(e->next, 0, sizeof (*(e->next)));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 22:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
memset(e, 0, sizeof (*(e)));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 169:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
printf("%d ", (in)->next->element);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 170:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
printf("%d ", (e)->next->element);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 171:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
newNode(&in);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 172:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = e->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 173:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = (in)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 278
Batcher Size:133
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
in->next = (in);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 174:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = (in);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 278
Counter: 279
Batcher Size:134
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
in->next = (e)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 175:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = (e)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 279
Counter: 280
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
in->next = (e);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 176:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = (e);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 280
Counter: 281
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
in->element = v;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 177:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->element = v;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 281
Counter: 282
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
in->element = (v);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 178:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->element = (v);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 282
Counter: 283
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
e = e->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 179:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = e->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 283
Counter: 284
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
e = (in)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 180:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = (in)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 284
Counter: 285
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
e = (in);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 181:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = (in);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 285
Counter: 286
Batcher Size:141
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
e = (e)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 182:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = (e)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 286
Counter: 287
Batcher Size:142
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
e = (e);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 183:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = (e);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 287
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    //prophet generated patch
    if (__get_mutant()==0) {
    in->next = (in);
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==1) {
    in->next = (e)->next;
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==2) {
    in->next = (e);
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==3) {
    in->element = v;
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==4) {
    in->element = (v);
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==5) {
    e = e->next;
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==6) {
    e = (in)->next;
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==7) {
    e = (in);
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==8) {
    e = (e)->next;
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==9) {
    e = (e);
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 174:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = (in);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 175:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = (e)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 176:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->next = (e);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 177:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->element = v;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 178:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->element = (v);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 179:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = e->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 180:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = (in)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 181:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = (in);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 182:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = (e)->next;
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 183:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
e = (e);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 288
Batcher Size:133
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
newNode(&(in));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 184:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
newNode(&(in));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 288
Counter: 289
Batcher Size:134
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
newNode(&(e));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 185:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
newNode(&(e));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 289
Counter: 290
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
newNode(&((*(l))->head));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 186:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
newNode(&((*(l))->head));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 290
Counter: 291
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -1
At location prog.c:38
--Src File: prog.c
Fragment 0:
in->element = (0);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }


BasicTester, a patch instance with id 187:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
in->element = (0);
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 291
Counter: 292
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -2
At location prog.c:37
--Src File: prog.c
Fragment 0:
in->element = (v);
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 188:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->element = (v);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 292
Counter: 293
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -2
At location prog.c:37
--Src File: prog.c
Fragment 0:
printf("%d ", (in)->next->element);
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 189:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
printf("%d ", (in)->next->element);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 293
Counter: 294
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -2
At location prog.c:37
--Src File: prog.c
Fragment 0:
newNode(&in);
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 190:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
newNode(&in);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 294
Counter: 295
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority -2
At location prog.c:37
--Src File: prog.c
Fragment 0:
newNode(&((*(l))->head));
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 191:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
newNode(&((*(l))->head));
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 295
Counter: 296
Batcher Size:141
Preprocess the following candidate with BasicTester:
Priority -2
At location prog.c:37
--Src File: prog.c
Fragment 0:
newNode(&(in));
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 192:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
newNode(&(in));
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 296
Counter: 297
Batcher Size:142
Preprocess the following candidate with BasicTester:
Priority -2
At location prog.c:37
--Src File: prog.c
Fragment 0:
in->next = (in)->next;
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 193:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->next = (in)->next;
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 297
Counter: 298
Batcher Size:143
Preprocess the following candidate with BasicTester:
Priority -2
At location prog.c:37
--Src File: prog.c
Fragment 0:
in->next = (in);
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 194:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->next = (in);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 298
Counter: 299
Batcher Size:144
Preprocess the following candidate with BasicTester:
Priority -2
At location prog.c:37
--Src File: prog.c
Fragment 0:
in->element = v;
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 195:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->element = v;
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 299
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(7, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &(v), sizeof (v), &(in), sizeof (in), &(in->element), sizeof (in->element), &(in->next), sizeof (in->next), &((*l)->size), sizeof ((*l)->size))))
        return;
    struct Entry *e = (*l)->head;
    }
    else if (__get_mutant()==1) {
    memset((*l), 0, sizeof (*((*l))));
    struct Entry *e = (*l)->head;
    }
    else if (__get_mutant()==2) {
    in->element = (v);
    struct Entry *e = (*l)->head;
    }
    else if (__get_mutant()==3) {
    printf("%d ", (in)->next->element);
    struct Entry *e = (*l)->head;
    }
    else if (__get_mutant()==4) {
    newNode(&in);
    struct Entry *e = (*l)->head;
    }
    else if (__get_mutant()==5) {
    newNode(&((*(l))->head));
    struct Entry *e = (*l)->head;
    }
    else if (__get_mutant()==6) {
    newNode(&(in));
    struct Entry *e = (*l)->head;
    }
    else if (__get_mutant()==7) {
    in->next = (in)->next;
    struct Entry *e = (*l)->head;
    }
    else if (__get_mutant()==8) {
    in->next = (in);
    struct Entry *e = (*l)->head;
    }
    else if (__get_mutant()==9) {
    in->element = v;
    struct Entry *e = (*l)->head;
    }
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building failed! Going to build saperately!
CondTester, Testing instance id 27:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &(v), sizeof (v), &(in), sizeof (in), &(in->element), sizeof (in->element), &(in->next), sizeof (in->next), &((*l)->size), sizeof ((*l)->size))))
    return;
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
BasicTester, Testing instance id 23:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
memset((*l), 0, sizeof (*((*l))));
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 188:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->element = (v);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 189:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
printf("%d ", (in)->next->element);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 190:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
newNode(&in);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 191:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
newNode(&((*(l))->head));
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 192:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
newNode(&(in));
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 193:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->next = (in)->next;
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 194:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->next = (in);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 195:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->element = v;
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 300
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority -2
At location prog.c:37
--Src File: prog.c
Fragment 0:
in->element = (0);
struct Entry *e = (*l)->head;


BasicTester, a patch instance with id 196:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->element = (0);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 300
Counter: 301
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -3
At location prog.c:36
--Src File: prog.c
Fragment 0:
in->element = (0);
in->element = v;


BasicTester, a patch instance with id 197:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = (0);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 301
Counter: 302
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -3
At location prog.c:36
--Src File: prog.c
Fragment 0:
printf("%d ", (in)->next->element);
in->element = v;


BasicTester, a patch instance with id 198:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
printf("%d ", (in)->next->element);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 302
Counter: 303
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -3
At location prog.c:36
--Src File: prog.c
Fragment 0:
newNode(&in);
in->element = v;


BasicTester, a patch instance with id 199:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
newNode(&in);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 303
Counter: 304
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -3
At location prog.c:36
--Src File: prog.c
Fragment 0:
newNode(&(in));
in->element = v;


BasicTester, a patch instance with id 200:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
newNode(&(in));
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 304
Counter: 305
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority -3
At location prog.c:36
--Src File: prog.c
Fragment 0:
newNode(&((*(l))->head));
in->element = v;


BasicTester, a patch instance with id 201:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
newNode(&((*(l))->head));
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 305
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(7, &(v), sizeof (v), &(in), sizeof (in), &(in->element), sizeof (in->element), &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &(in->next), sizeof (in->next), &((*l)->size), sizeof ((*l)->size))))
        return;
    in->element = v;
    }
    else if (__get_mutant()==1) {
    if (!(__is_neg(7, &(v), sizeof (v), &(in), sizeof (in), &(in->element), sizeof (in->element), &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &(in->next), sizeof (in->next), &((*l)->size), sizeof ((*l)->size))))
        in->element = v;
    }
    else if (__get_mutant()==2) {
    memset(in, 0, sizeof (*(in)));
    in->element = v;
    }
    else if (__get_mutant()==3) {
    in->element = (v);
    }
    else if (__get_mutant()==4) {
    in->element = (0);
    }
    else if (__get_mutant()==5) {
    in->element = (0);
    in->element = v;
    }
    else if (__get_mutant()==6) {
    printf("%d ", (in)->next->element);
    in->element = v;
    }
    else if (__get_mutant()==7) {
    newNode(&in);
    in->element = v;
    }
    else if (__get_mutant()==8) {
    newNode(&(in));
    in->element = v;
    }
    else if (__get_mutant()==9) {
    newNode(&((*(l))->head));
    in->element = v;
    }
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 28:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
if ((__is_neg(7, &(v), sizeof (v), &(in), sizeof (in), &(in->element), sizeof (in->element), &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &(in->next), sizeof (in->next), &((*l)->size), sizeof ((*l)->size))))
    return;
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
CondTester, Testing instance id 29:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
if (!(__is_neg(7, &(v), sizeof (v), &(in), sizeof (in), &(in->element), sizeof (in->element), &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &(in->next), sizeof (in->next), &((*l)->size), sizeof ((*l)->size))))
    in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
BasicTester, Testing instance id 24:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
memset(in, 0, sizeof (*(in)));
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 139:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = (v);

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 140:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = (0);

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 197:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = (0);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 198:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
printf("%d ", (in)->next->element);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 199:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
newNode(&in);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 200:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
newNode(&(in));
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 201:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
newNode(&((*(l))->head));
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 306
Batcher Size:131
Preprocess the following candidate with BasicTester:
Priority -3
At location prog.c:36
--Src File: prog.c
Fragment 0:
in->next = (in)->next;
in->element = v;


BasicTester, a patch instance with id 202:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->next = (in)->next;
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 306
Counter: 307
Batcher Size:132
Preprocess the following candidate with BasicTester:
Priority -3
At location prog.c:36
--Src File: prog.c
Fragment 0:
in->next = (in);
in->element = v;


BasicTester, a patch instance with id 203:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->next = (in);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 307
Counter: 308
Batcher Size:133
Preprocess the following candidate with BasicTester:
Priority -3
At location prog.c:36
--Src File: prog.c
Fragment 0:
in->element = v;
in->element = v;


BasicTester, a patch instance with id 204:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = v;
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 308
Counter: 309
Batcher Size:134
Preprocess the following candidate with BasicTester:
Priority -3
At location prog.c:36
--Src File: prog.c
Fragment 0:
in->element = (v);
in->element = v;


BasicTester, a patch instance with id 205:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = (v);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 309
Counter: 310
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority -5
At location prog.c:34
--Src File: prog.c
Fragment 0:
newNode(&((*(l))->head));
struct Entry *in;


BasicTester, a patch instance with id 206:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    
//Patch 0:
newNode(&((*(l))->head));
struct Entry *in;

//CodeSeg 1:
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 310
Counter: 311
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
printf(" %d", l->size);
return 0;


BasicTester, a patch instance with id 207:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
printf(" %d", l->size);
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 311
Counter: 312
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
node = (l)->head;
return 0;


BasicTester, a patch instance with id 208:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = (l)->head;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 312
Counter: 313
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
fclose((f));
return 0;


BasicTester, a patch instance with id 209:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
fclose((f));
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 313
Counter: 314
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
newList(&l);
return 0;


BasicTester, a patch instance with id 210:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
newList(&l);
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 314
Counter: 315
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
printf("%d ", (node)->next->element);
return 0;


BasicTester, a patch instance with id 211:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
printf("%d ", (node)->next->element);
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 315
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 2;
    return 0;
    }
    else if (__get_mutant()==1) {
    if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 0;
    return 0;
    }
    else if (__get_mutant()==2) {
    if (!(__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 0;
    }
    else if (__get_mutant()==3) {
    if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 20;
    return 0;
    }
    else if (__get_mutant()==4) {
    if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
        return 1;
    return 0;
    }
    else if (__get_mutant()==5) {
    printf(" %d", l->size);
    return 0;
    }
    else if (__get_mutant()==6) {
    node = (l)->head;
    return 0;
    }
    else if (__get_mutant()==7) {
    fclose((f));
    return 0;
    }
    else if (__get_mutant()==8) {
    newList(&l);
    return 0;
    }
    else if (__get_mutant()==9) {
    printf("%d ", (node)->next->element);
    return 0;
    }


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 33:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 2;
return 0;

//CodeSeg 1:


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 34:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;
return 0;

//CodeSeg 1:


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 35:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if (!(__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 0;

//CodeSeg 1:


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 36:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 20;
return 0;

//CodeSeg 1:


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 37:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if ((__is_neg(7, &(l), sizeof (l), &(l->size), sizeof (l->size), &(node), sizeof (node), &(l->head), sizeof (l->head), &(f), sizeof (f), &(argv), sizeof (argv), &(argc), sizeof (argc))))
    return 1;
return 0;

//CodeSeg 1:


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
BasicTester, Testing instance id 207:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
printf(" %d", l->size);
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 208:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = (l)->head;
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 209:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
fclose((f));
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 210:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
newList(&l);
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 211:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
printf("%d ", (node)->next->element);
return 0;

//CodeSeg 1:


}

Testing negative cases!
Counter: 316
Batcher Size:131
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
printf(" %d", (l)->size);
return 0;


BasicTester, a patch instance with id 212:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
printf(" %d", (l)->size);
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 316
Counter: 317
Batcher Size:132
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
node = l->head;
return 0;


BasicTester, a patch instance with id 213:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = l->head;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 317
Counter: 318
Batcher Size:133
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
newNode(&(node));
return 0;


BasicTester, a patch instance with id 214:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
newNode(&(node));
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 318
Counter: 319
Batcher Size:134
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
newList(&(l));
return 0;


BasicTester, a patch instance with id 215:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
newList(&(l));
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 319
Counter: 320
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
insertSort(&(l), atoi(x));
return 0;


BasicTester, a patch instance with id 216:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
insertSort(&(l), atoi(x));
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 320
Counter: 321
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
if (f == ((void *)0))
    return 0;
return 0;


BasicTester, a patch instance with id 217:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if (f == ((void *)0))
    return 0;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 321
Counter: 322
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
node = (node);
return 0;


BasicTester, a patch instance with id 218:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = (node);
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 322
Counter: 323
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
node = node->next;
return 0;


BasicTester, a patch instance with id 219:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = node->next;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 323
Counter: 324
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
node = (node)->next;
return 0;


BasicTester, a patch instance with id 220:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = (node)->next;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 324
Counter: 325
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
insertSort(&l, atoi(x));
return 0;


BasicTester, a patch instance with id 221:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
insertSort(&l, atoi(x));
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 325
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    //prophet generated patch
    if (__get_mutant()==0) {
    printf(" %d", (l)->size);
    return 0;
    }
    else if (__get_mutant()==1) {
    node = l->head;
    return 0;
    }
    else if (__get_mutant()==2) {
    newNode(&(node));
    return 0;
    }
    else if (__get_mutant()==3) {
    newList(&(l));
    return 0;
    }
    else if (__get_mutant()==4) {
    insertSort(&(l), atoi(x));
    return 0;
    }
    else if (__get_mutant()==5) {
    if (f == ((void *)0))
        return 0;
    return 0;
    }
    else if (__get_mutant()==6) {
    node = (node);
    return 0;
    }
    else if (__get_mutant()==7) {
    node = node->next;
    return 0;
    }
    else if (__get_mutant()==8) {
    node = (node)->next;
    return 0;
    }
    else if (__get_mutant()==9) {
    insertSort(&l, atoi(x));
    return 0;
    }


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 212:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
printf(" %d", (l)->size);
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 213:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = l->head;
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 214:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
newNode(&(node));
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 215:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
newList(&(l));
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 216:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
insertSort(&(l), atoi(x));
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 217:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if (f == ((void *)0))
    return 0;
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 218:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = (node);
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 219:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = node->next;
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 220:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
node = (node)->next;
return 0;

//CodeSeg 1:


}

Testing negative cases!
BasicTester, Testing instance id 221:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
insertSort(&l, atoi(x));
return 0;

//CodeSeg 1:


}

Testing negative cases!
Counter: 326
Batcher Size:131
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
printf("%d ", node->next->element);
return 0;


BasicTester, a patch instance with id 222:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
printf("%d ", node->next->element);
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 326
Counter: 327
Batcher Size:132
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
if (argc < 2)
    return 0;
return 0;


BasicTester, a patch instance with id 223:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if (argc < 2)
    return 0;
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 327
Counter: 328
Batcher Size:133
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
fclose(f);
return 0;


BasicTester, a patch instance with id 224:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
fclose(f);
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 328
Counter: 329
Batcher Size:134
Preprocess the following candidate with BasicTester:
Priority -7
At location prog.c:72
--Src File: prog.c
Fragment 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
return 0;


BasicTester, a patch instance with id 225:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    
//Patch 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
return 0;

//CodeSeg 1:


}

Spawn 1 instances, now Total 329
Counter: 330
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
newNode(&(node));
printf(" %d", l->size);


BasicTester, a patch instance with id 226:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
newNode(&(node));
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 330
Counter: 331
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
node = (node)->next;
printf(" %d", l->size);


BasicTester, a patch instance with id 227:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
node = (node)->next;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 331
Counter: 332
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
printf(" %d", l->size);
printf(" %d", l->size);


BasicTester, a patch instance with id 228:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf(" %d", l->size);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 332
Counter: 333
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
printf("%d ", (node)->next->element);
printf(" %d", l->size);


BasicTester, a patch instance with id 229:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf("%d ", (node)->next->element);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 333
Counter: 334
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
insertSort(&l, atoi(x));
printf(" %d", l->size);


BasicTester, a patch instance with id 230:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
insertSort(&l, atoi(x));
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 334
Counter: 335
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
node = (l)->head;
printf(" %d", l->size);


BasicTester, a patch instance with id 231:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
node = (l)->head;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 335
Counter: 336
Batcher Size:141
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
printf("%d ", node->next->element);
printf(" %d", l->size);


BasicTester, a patch instance with id 232:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf("%d ", node->next->element);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 336
Counter: 337
Batcher Size:142
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
printf(" %d", (l)->size);
printf(" %d", l->size);


BasicTester, a patch instance with id 233:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf(" %d", (l)->size);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 337
Counter: 338
Batcher Size:143
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
node = l->head;
printf(" %d", l->size);


BasicTester, a patch instance with id 234:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
node = l->head;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 338
Counter: 339
Batcher Size:144
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
node = (node);
printf(" %d", l->size);


BasicTester, a patch instance with id 235:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
node = (node);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 339
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    //prophet generated patch
    if (__get_mutant()==0) {
    newNode(&(node));
    printf(" %d", l->size);
    }
    else if (__get_mutant()==1) {
    node = (node)->next;
    printf(" %d", l->size);
    }
    else if (__get_mutant()==2) {
    printf(" %d", l->size);
    printf(" %d", l->size);
    }
    else if (__get_mutant()==3) {
    printf("%d ", (node)->next->element);
    printf(" %d", l->size);
    }
    else if (__get_mutant()==4) {
    insertSort(&l, atoi(x));
    printf(" %d", l->size);
    }
    else if (__get_mutant()==5) {
    node = (l)->head;
    printf(" %d", l->size);
    }
    else if (__get_mutant()==6) {
    printf("%d ", node->next->element);
    printf(" %d", l->size);
    }
    else if (__get_mutant()==7) {
    printf(" %d", (l)->size);
    printf(" %d", l->size);
    }
    else if (__get_mutant()==8) {
    node = l->head;
    printf(" %d", l->size);
    }
    else if (__get_mutant()==9) {
    node = (node);
    printf(" %d", l->size);
    }
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 226:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
newNode(&(node));
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 227:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
node = (node)->next;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 228:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf(" %d", l->size);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 229:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf("%d ", (node)->next->element);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 230:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
insertSort(&l, atoi(x));
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 231:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
node = (l)->head;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 232:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf("%d ", node->next->element);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 233:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
printf(" %d", (l)->size);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 234:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
node = l->head;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 235:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
node = (node);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Testing negative cases!
Counter: 340
Batcher Size:135
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
newList(&(l));
printf(" %d", l->size);


BasicTester, a patch instance with id 236:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
newList(&(l));
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 340
Counter: 341
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
insertSort(&(l), atoi(x));
printf(" %d", l->size);


BasicTester, a patch instance with id 237:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
insertSort(&(l), atoi(x));
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 341
Counter: 342
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
printf(" %d", l->size);


BasicTester, a patch instance with id 238:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 342
Counter: 343
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
if (f == ((void *)0))
    return 0;
printf(" %d", l->size);


BasicTester, a patch instance with id 239:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if (f == ((void *)0))
    return 0;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 343
Counter: 344
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
node = node->next;
printf(" %d", l->size);


BasicTester, a patch instance with id 240:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
node = node->next;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 344
Counter: 345
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
if (argc < 2)
    return 0;
printf(" %d", l->size);


BasicTester, a patch instance with id 241:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
if (argc < 2)
    return 0;
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 345
Counter: 346
Batcher Size:141
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
fclose((f));
printf(" %d", l->size);


BasicTester, a patch instance with id 242:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
fclose((f));
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 346
Counter: 347
Batcher Size:142
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
newList(&l);
printf(" %d", l->size);


BasicTester, a patch instance with id 243:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
newList(&l);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 347
Counter: 348
Batcher Size:143
Preprocess the following candidate with BasicTester:
Priority -8
At location prog.c:71
--Src File: prog.c
Fragment 0:
fclose(f);
printf(" %d", l->size);


BasicTester, a patch instance with id 244:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    
//Patch 0:
fclose(f);
printf(" %d", l->size);

//CodeSeg 1:
    return 0;


}

Spawn 1 instances, now Total 348
Counter: 349
Batcher Size:144
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
node = (node);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 245:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
node = (node);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 349
Counter: 350
Batcher Size:145
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
printf(" %d", l->size);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 246:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
printf(" %d", l->size);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 350
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
        return 0;
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==1) {
    if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
        return 1;
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==2) {
    if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
        return 20;
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==3) {
    if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
        return 2;
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==4) {
    if (!(__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
        while (node->next != l->head)
            {
                printf("%d ", node->next->element);
                node = node->next;
            }
    }
    else if (__get_mutant()==5) {
    memset(node->next, 0, sizeof (*(node->next)));
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==6) {
    memset(node, 0, sizeof (*(node)));
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==7) {
    memset(l, 0, sizeof (*(l)));
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==8) {
    node = (node);
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==9) {
    printf(" %d", l->size);
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 43:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 0;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 44:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 1;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 45:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 20;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 46:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if ((__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    return 2;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 47:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if (!(__is_neg(11, &(l), sizeof (l), &(node), sizeof (node), &(node->next), sizeof (node->next), &(l->head), sizeof (l->head), &(node->next->element), sizeof (node->next->element), &(f), sizeof (f), &(l->size), sizeof (l->size), &(argv), sizeof (argv), &(argc), sizeof (argc), &(node->next->next), sizeof (node->next->next), &(node->element), sizeof (node->element))))
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
BasicTester, Testing instance id 80:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
memset(node->next, 0, sizeof (*(node->next)));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 81:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
memset(node, 0, sizeof (*(node)));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 82:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
memset(l, 0, sizeof (*(l)));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 245:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
node = (node);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 246:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
printf(" %d", l->size);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Counter: 351
Batcher Size:136
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
node = node->next;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 247:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
node = node->next;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 351
Counter: 352
Batcher Size:137
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
node = (node)->next;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 248:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
node = (node)->next;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 352
Counter: 353
Batcher Size:138
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
node = (l)->head;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 249:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
node = (l)->head;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 353
Counter: 354
Batcher Size:139
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 250:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 354
Counter: 355
Batcher Size:140
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
if (argc < 2)
    return 0;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 251:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if (argc < 2)
    return 0;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 355
Counter: 356
Batcher Size:141
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
fclose((f));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 252:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
fclose((f));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 356
Counter: 357
Batcher Size:142
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
newList(&l);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 253:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
newList(&l);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 357
Counter: 358
Batcher Size:143
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
newList(&(l));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 254:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
newList(&(l));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 358
Counter: 359
Batcher Size:144
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
newNode(&(node));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 255:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
newNode(&(node));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 359
Counter: 360
Batcher Size:145
Preprocess the following candidate with BasicTester:
Priority -9
At location prog.c:67
--Src File: prog.c
Fragment 0:
printf("%d ", (node)->next->element);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }


BasicTester, a patch instance with id 256:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
printf("%d ", (node)->next->element);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Spawn 1 instances, now Total 360
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    //prophet generated patch
    if (__get_mutant()==0) {
    node = node->next;
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==1) {
    node = (node)->next;
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==2) {
    node = (l)->head;
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==3) {
    if (x[0] != '"') {
        insertSort(&l, atoi(x));
    }
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==4) {
    if (argc < 2)
        return 0;
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==5) {
    fclose((f));
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==6) {
    newList(&l);
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==7) {
    newList(&(l));
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==8) {
    newNode(&(node));
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    else if (__get_mutant()==9) {
    printf("%d ", (node)->next->element);
    while (node->next != l->head)
        {
            printf("%d ", node->next->element);
            node = node->next;
        }
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 247:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
node = node->next;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 248:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
node = (node)->next;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 249:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
node = (l)->head;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 250:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if (x[0] != '"') {
    insertSort(&l, atoi(x));
}
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 251:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
if (argc < 2)
    return 0;
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 252:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
fclose((f));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 253:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
newList(&l);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 254:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
newList(&(l));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 255:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
newNode(&(node));
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 256:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    
//Patch 0:
printf("%d ", (node)->next->element);
while (node->next != l->head)
    {
        printf("%d ", node->next->element);
        node = node->next;
    }

//CodeSeg 1:
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Going to sync the batch tester, clear all existing tasks!
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
        return;
    *l = malloc(sizeof(struct List));
    }
    else if (__get_mutant()==1) {
    (*l)->head->next = (*(l))->head;
    *l = malloc(sizeof(struct List));
    }
    else if (__get_mutant()==2) {
    newNode(&((*l)->head));
    *l = malloc(sizeof(struct List));
    }
    else if (__get_mutant()==3) {
    newNode(&((*(l))->head));
    *l = malloc(sizeof(struct List));
    }
    else if (__get_mutant()==4) {
    *l = malloc(sizeof(struct List));
    *l = malloc(sizeof(struct List));
    }
    else if (__get_mutant()==5) {
    (*l)->head->next = (*l)->head;
    *l = malloc(sizeof(struct List));
    }
    else if (__get_mutant()==6) {
    *l = malloc(sizeof(struct List));
    }
    else if (__get_mutant()==7) {
    if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
        *l = malloc(sizeof(struct List));
    }
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 8:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
if ((__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
BasicTester, Testing instance id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
(*l)->head->next = (*(l))->head;
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 12:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
newNode(&((*l)->head));
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 13:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
newNode(&((*(l))->head));
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 14:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
*l = malloc(sizeof(struct List));
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 15:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
(*l)->head->next = (*l)->head;
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 131:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
*l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 82:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    
//Patch 0:
if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    *l = malloc(sizeof(struct List));

//CodeSeg 1:
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 1
Branch 2: 1
Iteration 1
Branch 0: 1
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    //prophet generated patch
    if (__get_mutant()==0) {
    if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
        newNode(&((*l)->head));
    }
    else if (__get_mutant()==1) {
    memset((*l)->head, 0, sizeof (*((*l)->head)));
    newNode(&((*l)->head));
    }
    else if (__get_mutant()==2) {
    newNode(&((*l)->head));
    }
    else if (__get_mutant()==3) {
    if ((__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
        return;
    newNode(&((*l)->head));
    }
    else if (__get_mutant()==4) {
    memset((*l), 0, sizeof (*((*l))));
    newNode(&((*l)->head));
    }
    else if (__get_mutant()==5) {
    newNode(&((*(l))->head));
    }
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 80:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
BasicTester, Testing instance id 128:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
memset((*l)->head, 0, sizeof (*((*l)->head)));
newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 129:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 81:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
if ((__is_neg(5, &(l), sizeof (l), &((*l)->head), sizeof ((*l)->head), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;
newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 1
Branch 1: 1
Branch 2: 1
Branch 3: 1
Branch 4: 1
BasicTester, Testing instance id 130:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
memset((*l), 0, sizeof (*((*l))));
newNode(&((*l)->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 148:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    
//Patch 0:
newNode(&((*(l))->head));

//CodeSeg 1:
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
        return;
    (*l)->head->next = (*l)->head;
    }
    else if (__get_mutant()==1) {
    memset((*l)->head, 0, sizeof (*((*l)->head)));
    (*l)->head->next = (*l)->head;
    }
    else if (__get_mutant()==2) {
    memset((*l), 0, sizeof (*((*l))));
    (*l)->head->next = (*l)->head;
    }
    else if (__get_mutant()==3) {
    if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
        (*l)->head->next = (*l)->head;
    }
    else if (__get_mutant()==4) {
    (*l)->head->next = (*(l))->head;
    }
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 78:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
if ((__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;
(*l)->head->next = (*l)->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Not caught by the negative case, give up!
BasicTester, Testing instance id 126:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
memset((*l)->head, 0, sizeof (*((*l)->head)));
(*l)->head->next = (*l)->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 127:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
memset((*l), 0, sizeof (*((*l))));
(*l)->head->next = (*l)->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 79:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    (*l)->head->next = (*l)->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 1
BasicTester, Testing instance id 147:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    
//Patch 0:
(*l)->head->next = (*(l))->head;

//CodeSeg 1:
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    //prophet generated patch
    if (__get_mutant()==0) {
    if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
        return;
    }
    else if (__get_mutant()==1) {
    if ((__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
        return;
    return;
    }
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 76:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    
//Patch 0:
if (!(__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;

//CodeSeg 1:
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 1
CondTester, Testing instance id 77:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    
//Patch 0:
if ((__is_neg(5, &(l), sizeof (l), &((*l)->head->next), sizeof ((*l)->head->next), &((*l)->head), sizeof ((*l)->head), &((*l)->head->element), sizeof ((*l)->head->element), &((*l)->size), sizeof ((*l)->size))))
    return;
return;

//CodeSeg 1:
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 1
Branch 1: 1
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(1, &(n), sizeof (n))))
        return;
    *n = malloc(sizeof(struct Entry));
    }
    else if (__get_mutant()==1) {
    (*n)->next = ((void *)0);
    *n = malloc(sizeof(struct Entry));
    }
    else if (__get_mutant()==2) {
    *n = malloc(sizeof(struct Entry));
    *n = malloc(sizeof(struct Entry));
    }
    else if (__get_mutant()==3) {
    if (!(__is_neg(1, &(n), sizeof (n))))
        *n = malloc(sizeof(struct Entry));
    }
    else if (__get_mutant()==4) {
    *n = malloc(sizeof(struct Entry));
    }
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 7:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
if ((__is_neg(1, &(n), sizeof (n))))
    return;
*n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 2
Branch 0: 0
Branch 1: 1
Iteration 3
Not caught by the negative case, give up!
BasicTester, Testing instance id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
(*n)->next = ((void *)0);
*n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 11:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
*n = malloc(sizeof(struct Entry));
*n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 62:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
if (!(__is_neg(1, &(n), sizeof (n))))
    *n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Iteration 2
Branch 0: 0
Iteration 3
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 4
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Branch 5: 0
Branch 6: 0
Branch 7: 0
Branch 8: 0
Branch 9: 0
Branch 10: 0
Branch 11: 0
Branch 12: 0
Branch 13: 0
Branch 14: 0
Branch 15: 0
Branch 16: 0
Branch 17: 0
Branch 18: 0
Branch 19: 0
Branch 20: 0
Branch 21: 0
Branch 22: 0
Branch 23: 0
Branch 24: 0
Branch 25: 0
Branch 26: 0
Branch 27: 0
Branch 28: 0
Branch 29: 0
Branch 30: 0
Branch 31: 0
Branch 32: 0
Branch 33: 0
Branch 34: 0
Branch 35: 0
Branch 36: 0
Branch 37: 0
Branch 38: 0
Branch 39: 0
Branch 40: 0
Branch 41: 0
Branch 42: 0
Branch 43: 0
Branch 44: 0
Branch 45: 0
Branch 46: 0
Branch 47: 0
Branch 48: 0
Branch 49: 0
Branch 50: 0
Branch 51: 0
Branch 52: 0
Branch 53: 0
Branch 54: 0
Branch 55: 0
Branch 56: 0
Branch 57: 0
Branch 58: 0
Branch 59: 0
Branch 60: 0
Branch 61: 0
Branch 62: 0
Branch 63: 0
Branch 64: 0
Branch 65: 0
Branch 66: 0
Branch 67: 0
Branch 68: 0
Branch 69: 0
Branch 70: 0
Branch 71: 0
Branch 72: 0
Branch 73: 0
Branch 74: 0
Branch 75: 0
Branch 76: 0
Branch 77: 0
Branch 78: 0
Branch 79: 0
Branch 80: 0
Branch 81: 0
Branch 82: 0
Branch 83: 0
Branch 84: 0
Branch 85: 0
Branch 86: 0
Branch 87: 0
Branch 88: 0
Branch 89: 0
Branch 90: 0
Branch 91: 0
Branch 92: 0
Branch 93: 0
Branch 94: 1
Iteration 5
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Branch 5: 0
Branch 6: 0
Branch 7: 0
Branch 8: 0
Branch 9: 0
Branch 10: 0
Branch 11: 0
Branch 12: 0
Branch 13: 0
Branch 14: 0
Branch 15: 0
Branch 16: 0
Branch 17: 0
Branch 18: 0
Branch 19: 0
Branch 20: 0
Branch 21: 0
Branch 22: 0
Branch 23: 0
Branch 24: 0
Branch 25: 0
Branch 26: 0
Branch 27: 0
Branch 28: 0
Branch 29: 0
Branch 30: 0
Branch 31: 0
Branch 32: 0
Branch 33: 0
Branch 34: 0
Branch 35: 0
Branch 36: 0
Branch 37: 0
Branch 38: 0
Branch 39: 0
Branch 40: 0
Branch 41: 0
Branch 42: 0
Branch 43: 0
Branch 44: 0
Branch 45: 0
Branch 46: 0
Branch 47: 0
Branch 48: 0
Branch 49: 0
Branch 50: 0
Branch 51: 0
Branch 52: 0
Branch 53: 0
Branch 54: 0
Branch 55: 0
Branch 56: 0
Branch 57: 0
Branch 58: 0
Branch 59: 0
Branch 60: 0
Branch 61: 0
Branch 62: 0
Branch 63: 0
Branch 64: 0
Branch 65: 0
Branch 66: 0
Branch 67: 0
Branch 68: 0
Branch 69: 0
Branch 70: 0
Branch 71: 0
Branch 72: 0
Branch 73: 0
Branch 74: 0
Branch 75: 0
Branch 76: 0
Branch 77: 0
Branch 78: 0
Branch 79: 0
Branch 80: 0
Branch 81: 0
Branch 82: 0
Branch 83: 0
Branch 84: 0
Branch 85: 0
Branch 86: 0
Branch 87: 0
Branch 88: 0
Branch 89: 0
Branch 90: 0
Branch 91: 0
Branch 92: 0
Branch 93: 1
Iteration 6
BasicTester, Testing instance id 124:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    
//Patch 0:
*n = malloc(sizeof(struct Entry));

//CodeSeg 1:
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(3, &(n), sizeof (n), &((*n)->next), sizeof ((*n)->next), &((*n)->element), sizeof ((*n)->element))))
        return;
    (*n)->next = ((void *)0);
    }
    else if (__get_mutant()==1) {
    if (!(__is_neg(3, &(n), sizeof (n), &((*n)->next), sizeof ((*n)->next), &((*n)->element), sizeof ((*n)->element))))
        (*n)->next = ((void *)0);
    }
    else if (__get_mutant()==2) {
    memset((*n), 0, sizeof (*((*n))));
    (*n)->next = ((void *)0);
    }
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 60:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    
//Patch 0:
if ((__is_neg(3, &(n), sizeof (n), &((*n)->next), sizeof ((*n)->next), &((*n)->element), sizeof ((*n)->element))))
    return;
(*n)->next = ((void *)0);

//CodeSeg 1:
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Not caught by the negative case, give up!
CondTester, Testing instance id 61:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    
//Patch 0:
if (!(__is_neg(3, &(n), sizeof (n), &((*n)->next), sizeof ((*n)->next), &((*n)->element), sizeof ((*n)->element))))
    (*n)->next = ((void *)0);

//CodeSeg 1:
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Iteration 1
Branch 0: 1
BasicTester, Testing instance id 123:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    
//Patch 0:
memset((*n), 0, sizeof (*((*n))));
(*n)->next = ((void *)0);

//CodeSeg 1:
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    //prophet generated patch
    if (__get_mutant()==0) {
    if ((__is_neg(2, &(v), sizeof (v), &(l), sizeof (l))))
        return;
    struct Entry *in;
    }
    else if (__get_mutant()==1) {
    newNode(&((*(l))->head));
    struct Entry *in;
    }
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building failed! Going to build saperately!
CondTester, Testing instance id 31:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    
//Patch 0:
if ((__is_neg(2, &(v), sizeof (v), &(l), sizeof (l))))
    return;
struct Entry *in;

//CodeSeg 1:
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Iteration 1
Branch 0: 0
Branch 1: 1
Iteration 2
Branch 0: 1
Branch 1: 0
Iteration 3
Branch 0: 1
Branch 1: 1
BasicTester, Testing instance id 206:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    
//Patch 0:
newNode(&((*(l))->head));
struct Entry *in;

//CodeSeg 1:
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    //prophet generated patch
    if (__get_mutant()==0) {
    newNode(&in);
    }
    else if (__get_mutant()==1) {
    memset(in, 0, sizeof (*(in)));
    newNode(&in);
    }
    else if (__get_mutant()==2) {
    if (!(__is_neg(5, &(in), sizeof (in), &(v), sizeof (v), &(in->element), sizeof (in->element), &(l), sizeof (l), &(in->next), sizeof (in->next))))
        newNode(&in);
    }
    else if (__get_mutant()==3) {
    newNode(&(in));
    }
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 25:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 26:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
memset(in, 0, sizeof (*(in)));
newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
CondTester, Testing instance id 30:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
if (!(__is_neg(5, &(in), sizeof (in), &(v), sizeof (v), &(in->element), sizeof (in->element), &(l), sizeof (l), &(in->next), sizeof (in->next))))
    newNode(&in);

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
Testing 1 (with abstract condition)
Iteration 0
Branch 0: 1
BasicTester, Testing instance id 141:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    
//Patch 0:
newNode(&(in));

//CodeSeg 1:
    in->element = v;
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    //prophet generated patch
    if (__get_mutant()==0) {
    in->next = (in)->next;
    in->element = v;
    }
    else if (__get_mutant()==1) {
    in->next = (in);
    in->element = v;
    }
    else if (__get_mutant()==2) {
    in->element = v;
    in->element = v;
    }
    else if (__get_mutant()==3) {
    in->element = (v);
    in->element = v;
    }
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 202:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->next = (in)->next;
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 203:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->next = (in);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 204:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = v;
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 205:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    
//Patch 0:
in->element = (v);
in->element = v;

//CodeSeg 1:
    struct Entry* e = (*l)->head;
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    //prophet generated patch
    if (__get_mutant()==0) {
    in->element = (0);
    struct Entry *e = (*l)->head;
    }
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building failed! Going to build saperately!
BasicTester, Testing instance id 196:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    
//Patch 0:
in->element = (0);
struct Entry *e = (*l)->head;

//CodeSeg 1:
    while ( e->next != (*l)->head) {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    //prophet generated patch
    if (__get_mutant()==0) {
    newNode(&(in));
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==1) {
    newNode(&(e));
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==2) {
    newNode(&((*(l))->head));
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    else if (__get_mutant()==3) {
    in->element = (0);
    while (e->next != (*l)->head)
        {
            if (e->next->element < v)
                e = e->next;
            else
                break;
        }
    }
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 184:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
newNode(&(in));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 185:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
newNode(&(e));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20];
    struct Entry* node;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] != '"') {
            //newNode(atoi(x),&node);
            insertSort(&l,atoi(x));
        }
    }
    fclose(f);

    node = l->head;
    while (node->next != l->head) {
        printf("%d ",node->next->element);
        node = node->next;
    }
    printf(" %d",l->size);
    return 0;


}

Testing negative cases!
BasicTester, Testing instance id 186:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Entry{
    int  element;
    struct Entry*  next;
};

struct List {
    int size;
    struct Entry*  head;
};
void newList(struct List **_out) ;
void reverse(struct List **l);
void newNode(struct Entry** out);
void insertSort(struct List** l, int v);
int hasLoop(struct List *l);

void newList(struct List** l) {
    *l = malloc( sizeof(struct List)  );
    newNode(&((*l)->head));
    (*l)->head->next = (*l)->head;
    return;
}

void newNode( struct Entry** n){
    *n = malloc(sizeof(struct Entry));
//    (*n)->element = v;
    (*n)->next = NULL;
}

void  insertSort (struct List** l, int v) {
    struct Entry* in;
    newNode(&in);
    in->element = v;
    struct Entry* e = (*l)->head;
    
//Patch 0:
newNode(&((*(l))->head));
while (e->next != (*l)->head)
    {
        if (e->next->element < v)
            e = e->next;
        else
            break;
    }

//CodeSeg 1:
    in->next = e->next;
//    e->next = in;
  //  (*l)->size = (*l)->size + 1;
}


int main(int argc, char *argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL) return 0;
    struct List *l;
    newList(&l);
    char x[20]