struct Node {
    int key;
    Node left;
    Node right;
    Node p;//precessor
}

struct BST {
    Node root;
    int size;
}

Node newNode(int val) {
    Node n = new Node();
    n.key = val;
    n.left = null;
    n.right = null;
    n.p = null;
    return n;
}

BST newBST() {
    BST bst = new BST();
    bst.root = null;
    bst.size = 0;
    return bst;
}

bit insert_bst (BST T, int k) {
    Node x = T.root;
    Node y = null;
    
    while (x != null) {
      // y = x;
        if (x.key==k)
            return 1;
        if (k < x.key)
            x = x.left;
        else 
            x = x.right;
    }

    x = newNode(k);
    if (y==null) {
        T.root = x;
    } else {
        if (x.key < y.key) 
            y.left = x;
        
        if (x.key >= y.key) 
            y.right =x;
    }
    //x.p = y;
    T.size = T.size +1;
    return 0;
}

harness void insertHarness() {
        BST bst = newBST();
    //insert 5
    insert_bst (bst, 5);
    assert bst.root.key == 5;
    assert bst.root.left == null;
    assert bst.root.right ==null;
    assert  bst.size ==1;
    
    //insert 1
    insert_bst (bst, 1);
    assert bst.root.key == 5;
    assert bst.root.left.key == 1;
      assert  bst.size ==2;
      
        //insert 7
    insert_bst (bst, 7);
    assert bst.root.key == 5;
    assert bst.root.right.key == 7;
     assert  bst.size ==3;
}

