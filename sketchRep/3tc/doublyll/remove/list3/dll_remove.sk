

struct Entry{
    int element;
    Entry next;
    Entry previous;
}

Entry newEntry(){
    Entry n = new Entry();
    n.previous = null;
    n.next = null;
    return n;
}

struct LinkedList{
    Entry head;
    int size;
}

LinkedList newList() {
    LinkedList l = new LinkedList();
    l.head = newEntry();
    l.head.next = l.head;
    l.head.previous = l.head;
    l.size = 0;
    return l;
}

void addFirst(LinkedList l, int v) {
    Entry e = newEntry();
    e.element = v;
  e.next = l.head.next;
  e.previous = l.head;
  e.previous.next = e;
  e.next.previous = e;
    l.size = l.size+1;
}

void addLast(LinkedList l, int v) {
    Entry e = newEntry();
    e.element = v;
    e.next = l.head;
    e.previous = l.head.previous;
    e.previous.next = e;
    e.next.previous = e;
    l.size = l.size+1;
}

int remove(LinkedList l, int v) {
    Entry e = l.head.next;
    while (e != l.head ) {
        if (e.element != v)
            e = e.next;
         else {
          //  e.previous.next = e.next;
            e.next.previous = e.previous;
            l.size = l.size -1;
            return 1;
        }
    }
    return 0;
}


harness void removeHarness() {
     
     //remove from 1 list
     l = newList();
     addFirst(l,1);
     assert remove(l,1) ==1;
     assert l.head.next == l.head;
     assert l.head.previous == l.head;
     assert l.size ==0;
     
     //remove from 1 list, not exist
     l = newList();
     addFirst(l,2);
     assert remove(l,1) ==0;
     assert l.head.next == l.head;
     assert l.head.previous == l.head;
     assert l.size ==1;
     
     //remove from 3, first
     l = newList();
     addFirst(l,1);
     addFirst(l,2);
     addFirst(l,3);
     
     assert remove(l,1) ==1;
     assert l.head.next.element ==3;
     assert l.head.next.previous == l.head;
     assert l.head.next.next.element == 2;
     
     assert l.head.next.next.element ==2;
     assert l.head.next.next.previous.element == 3;
     assert l.head.next.next.next == l.head;     
     assert l.size ==2;
     
   
}

