/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    int element;
    Entry next;
    Entry previous;
}
struct LinkedList {
    Entry head;
    int size;
}
/*dll_add.sk35:13*/

void addFirst (LinkedList l_7, int v_8)/*dll_add.sk35:13*/
{
    {
        Entry@ANONYMOUS e_9;
        Entry@ANONYMOUS e_s9_a;
        newEntry(e_s9_a);
        e_9 = e_s9_a;
        e_9.element = v_8;
        e_9.previous = l_7.head;
        {
            {| ((((((((((((((((((((((((((((((((e_s9_a | e_9)) | e_s9_a.next)) | e_9.next)) | e_9.previous)) | l_7.head)) | e_s9_a.previous)) | e_s9_a.previous.previous)) | e_s9_a.next.next)) | e_s9_a.previous.next)) | e_9.previous.previous)) | l_7.head.previous)) | e_9.next.next)) | e_9.next.previous)) | e_s9_a.next.previous)) | e_9.previous.next)) | l_7.head.next)) |} = {| ((((((((((((((((((((((((((((((((((e_s9_a | e_9)) | e_s9_a.next)) | e_9.next)) | e_9.previous)) | l_7.head)) | e_s9_a.previous)) | e_s9_a.previous.previous)) | e_s9_a.next.next)) | e_s9_a.previous.next)) | e_9.previous.previous)) | l_7.head.previous)) | e_9.next.next)) | e_9.next.previous)) | e_s9_a.next.previous)) | e_9.previous.next)) | l_7.head.next)) | null)) |};
            {| ((((((((((((((((((((((((((((((((e_s9_a | e_9)) | e_s9_a.next)) | e_9.next)) | e_9.previous)) | l_7.head)) | e_s9_a.previous)) | e_s9_a.previous.previous)) | e_s9_a.next.next)) | e_s9_a.previous.next)) | e_9.previous.previous)) | l_7.head.previous)) | e_9.next.next)) | e_9.next.previous)) | e_s9_a.next.previous)) | e_9.previous.next)) | l_7.head.next)) |} = {| ((((((((((((((((((((((((((((((((((e_s9_a | e_9)) | e_s9_a.next)) | e_9.next)) | e_9.previous)) | l_7.head)) | e_s9_a.previous)) | e_s9_a.previous.previous)) | e_s9_a.next.next)) | e_s9_a.previous.next)) | e_9.previous.previous)) | l_7.head.previous)) | e_9.next.next)) | e_9.next.previous)) | e_s9_a.next.previous)) | e_9.previous.next)) | l_7.head.next)) | null)) |};
        }
        l_7.size = (l_7.size) + 1;
    }
}
/*dll_add.sk35:31*/

void addFrontHarness ()/*dll_add.sk35:31*/
{
    LinkedList@ANONYMOUS l_0;
    LinkedList@ANONYMOUS l_s1_1;
    newList(l_s1_1);
    l_0 = l_s1_1;
    assert ((l_0.size) == 0); //Assert at dll_add.sk35:37 (4740784041282215908)
    assert ((l_0.head.next) == (l_0.head)); //Assert at dll_add.sk35:38 (-7212220115870800310)
    assert ((l_0.head.previous) == (l_0.head)); //Assert at dll_add.sk35:39 (-980713187802372561)
    LinkedList@ANONYMOUS l_s3_2;
    newList(l_s3_2);
    l_0 = l_s3_2;
    addFirst(l_0, 8);
    assert ((l_0.head.next.element) == 8); //Assert at dll_add.sk35:44 (-1419409029657865861)
    assert ((l_0.head.next.previous) == (l_0.head)); //Assert at dll_add.sk35:45 (674814781498568836)
    assert ((l_0.head.next.next) == (l_0.head)); //Assert at dll_add.sk35:46 (-2917158494691449406)
    assert ((l_0.size) == 1); //Assert at dll_add.sk35:47 (-2452901646612627462)
    LinkedList@ANONYMOUS l_s5_3;
    newList(l_s5_3);
    l_0 = l_s5_3;
    addFirst(l_0, 8);
    addFirst(l_0, 5);
    assert ((l_0.head.next.element) == 5); //Assert at dll_add.sk35:53 (4779783142180700671)
    assert ((l_0.head.next.previous) == (l_0.head)); //Assert at dll_add.sk35:54 (-8850220686828670831)
    assert ((l_0.head.next.next.element) == 8); //Assert at dll_add.sk35:55 (-1945485292054840846)
    assert ((l_0.head.next.next.element) == 8); //Assert at dll_add.sk35:56 (-6947312523091121076)
    assert ((l_0.head.next.next.previous.element) == 5); //Assert at dll_add.sk35:57 (3748067163113071357)
    assert ((l_0.head.next.next.next) == (l_0.head)); //Assert at dll_add.sk35:58 (8384079542997077437)
    assert ((l_0.size) == 2); //Assert at dll_add.sk35:59 (497319415304994047)
    LinkedList@ANONYMOUS l_s7_4;
    newList(l_s7_4);
    l_0 = l_s7_4;
    addFirst(l_0, 8);
    addFirst(l_0, 5);
    addFirst(l_0, 13);
    assert ((l_0.head.next.element) == 13); //Assert at dll_add.sk35:66 (-8987080886873322448)
    assert ((l_0.head.next.previous) == (l_0.head)); //Assert at dll_add.sk35:67 (-5083737047790120555)
    assert ((l_0.head.next.next.element) == 5); //Assert at dll_add.sk35:68 (4062078802451776225)
    assert ((l_0.head.next.next.element) == 5); //Assert at dll_add.sk35:69 (924406313480437471)
    assert ((l_0.head.next.next.previous.element) == 13); //Assert at dll_add.sk35:70 (4030709188628462447)
    assert ((l_0.head.next.next.next.element) == 8); //Assert at dll_add.sk35:71 (3757445913678398645)
    assert ((l_0.head.next.next.next.element) == 8); //Assert at dll_add.sk35:72 (-5693079118917148266)
    assert ((l_0.head.next.next.next.previous.element) == 5); //Assert at dll_add.sk35:73 (6780322926163566945)
    assert ((l_0.head.next.next.next.next) == (l_0.head)); //Assert at dll_add.sk35:74 (7862179785265069531)
    assert ((l_0.size) == 3); //Assert at dll_add.sk35:75 (1918881464872735641)
}
/*dll_add.sk35:79*/

void addFrontHarness__Wrapper ()  implements addFrontHarness__WrapperNospec/*dll_add.sk35:79*/
{
    addFrontHarness();
}
/*dll_add.sk35:85*/

void addFrontHarness__WrapperNospec ()/*dll_add.sk35:85*/
{
}
/*dll_add.sk35:90*/

void newEntry (ref Entry _out_b)/*dll_add.sk35:90*/
{
    _out_b = null;
    _out_b = new Entry();
    _out_b.previous = null;
    _out_b.next = null;
    return;
}
/*dll_add.sk35:100*/

void newList (ref LinkedList _out_5)/*dll_add.sk35:100*/
{
    _out_5 = null;
    _out_5 = new LinkedList();
    Entry@ANONYMOUS _out_s11_6;
    newEntry(_out_s11_6);
    _out_5.head = _out_s11_6;
    _out_5.head.next = _out_5.head;
    _out_5.head.previous = _out_5.head;
    _out_5.size = 0;
    return;
}
/* END PACKAGE ANONYMOUS*/
