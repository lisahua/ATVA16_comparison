struct Entry {
    Entry next;
    int element;
}

struct LinkedList {
    Entry head;
    int size;
}

Entry newEntry() {
    Entry n = new Entry();
    n.next = null;
    return n;
}

LinkedList newList() {
    LinkedList l = new LinkedList();
    l.head= null;
    l.size =0;
    return l;
}

void reverse(LinkedList l) {
    if (l.head ==null)
        return;
    Entry ln1 = l.head;
    Entry ln2 = l.head.next;
    Entry ln3 = null;
    Entry ln4 = null;
    while (ln2 != null) {
        ln4 = ln2.next;
        ln1.next = ln3;
        ln3 = ln1;
        ln1 = ln2;
        ln2 = ln4;
    }
    l.head = ln1;
    ln1.next = ln3;
}


harness void insertHarness() {
         //Empty
    LinkedList l = null;
    l = newList();
    reverse(l);
    assert l.head.next == l.head;
    assert l.size ==0;

    //insert 22
     l = newList();
    insertSort(l,22);
    reverse(l);
    assert l.head.next.element == 22;
    assert l.head.next.next ==l.head;
    assert l.size ==1;

    //insert 0,-3;
     l = newList();
    insertSort(l,0);
    insertSort(l,-3);
    reverse(l);
    assert l.head.next.element == 0;
    assert l.head.next.next.element == -3;
    assert l.head.next.next.next == l.head;
    assert l.size ==2;
}
