/* BEGIN PACKAGE ANONYMOUS*/
struct Node {
    int key;
    Node left;
    Node right;
    Node p;
}
struct BST {
    Node root;
    int size;
}
/*bst_insert.sk13:14*/

void insertHarness ()/*bst_insert.sk13:14*/
{
  BST@ANONYMOUS bst_s1_1 = null;
  newBST(bst_s1_1);
  bit _out_s3_2 = 0;
  insert_bst(bst_s1_1, 5, _out_s3_2);
  assert ((bst_s1_1.root.key) == 5); //Assert at bst_insert.sk13:23 (-527861849842295059)
  assert ((bst_s1_1.root.left) == (null)); //Assert at bst_insert.sk13:24 (5747484204133806627)
  assert ((bst_s1_1.root.right) == (null)); //Assert at bst_insert.sk13:25 (-2795311527158953357)
  assert ((bst_s1_1.size) == 1); //Assert at bst_insert.sk13:26 (-8847455923081167847)
  bit _out_s5_3 = 0;
  insert_bst(bst_s1_1, 1, _out_s5_3);
  assert ((bst_s1_1.root.key) == 5); //Assert at bst_insert.sk13:30 (-3002686165364219746)
  assert ((bst_s1_1.root.left.key) == 1); //Assert at bst_insert.sk13:31 (4736033716319361514)
  assert ((bst_s1_1.size) == 2); //Assert at bst_insert.sk13:32 (953708552285304492)
  bit _out_s7_4 = 0;
  insert_bst(bst_s1_1, 7, _out_s7_4);
  assert ((bst_s1_1.root.key) == 5); //Assert at bst_insert.sk13:36 (1253145205443042531)
  assert ((bst_s1_1.root.right.key) == 7); //Assert at bst_insert.sk13:37 (-7211704034848182104)
  assert ((bst_s1_1.size) == 3); //Assert at bst_insert.sk13:38 (2065142283875787649)
}
/*bst_insert.sk13:42*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*bst_insert.sk13:42*/
{
  insertHarness();
}
/*bst_insert.sk13:48*/

void insertHarness__WrapperNospec ()/*bst_insert.sk13:48*/
{ }
/*bst_insert.sk13:53*/

void insert_bst (BST T_6, int k_7_0, ref bit _out_8)/*bst_insert.sk13:53*/
{
  _out_8 = 0;
  Node@ANONYMOUS x_9 = T_6.root;
  Node@ANONYMOUS y_a = null;
  while(x_9 != (null))
  {
    y_a = x_9;
    if((x_9.key) == k_7_0)/*bst_insert.sk13:66*/
    {
      _out_8 = 1;
      return;
    }
    if(k_7_0 < (x_9.key))/*bst_insert.sk13:73*/
    {
      x_9 = x_9.left;
    }
    else
    {
      x_9 = x_9.right;
    }
  }
  Node@ANONYMOUS x_s9_b = null;
  newNode(k_7_0, x_s9_b);
  if(y_a == (null))/*bst_insert.sk13:87*/
  {
    T_6.root = x_s9_b;
  }
  else
  {
    if((x_s9_b.key) < (y_a.key))/*bst_insert.sk13:96*/
    {
      y_a.left = x_s9_b;
    }
    if((x_s9_b.key) >= (y_a.key))/*bst_insert.sk13:100*/
    {
      y_a.right = x_s9_b;
    }
  }
  x_s9_b.p = y_a;
  _out_8 = 0;
  int _tmprhs_s1 = T_6.root.key;
  x_s9_b.key = _tmprhs_s1;
  int _tmprhs_s4 = (T_6.size) + 1;
  T_6.size = _tmprhs_s4;
  x_s9_b.key = k_7_0 - 0;
  return;
}
/*bst_insert.sk13:122*/

void newBST (ref BST _out_5)/*bst_insert.sk13:122*/
{
  _out_5 = null;
  _out_5 = new BST();
  _out_5.root = null;
  _out_5.size = 0;
  return;
}
/*bst_insert.sk13:132*/

void newNode (int val_c, ref Node _out_d)/*bst_insert.sk13:132*/
{
  _out_d = null;
  _out_d = new Node();
  _out_d.key = val_c;
  _out_d.left = null;
  _out_d.right = null;
  _out_d.p = null;
  return;
}
/* END PACKAGE ANONYMOUS*/
