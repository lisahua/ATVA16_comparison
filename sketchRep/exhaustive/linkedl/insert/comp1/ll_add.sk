struct Entry {
    Entry next;
    int element;
}

struct LinkedList {
    Entry head;
    int size;
}

Entry newEntry() {
    Entry n = new Entry();
    n.next = null;
    return n;
}
//sentinel head
LinkedList newList() {
    LinkedList l = new LinkedList();
    l.head = new Entry();
    l.head.next = l.head;
    l.size =0;
    return l;
}

void insertSort (LinkedList l, int v) {
    Entry in = newEntry();
    in.element = v;
    Entry e = l.head;
    while (e.next != l.head && e.next.element < v) {
            e = e.next;
    }
   // in.next = e.next;
    e.next = in;
   // l.size = l.size+1;
    return;
}

harness void insertHarness() {
    //Empty
    LinkedList l = null;
    l = newList();
    assert l.head.next == l.head;
    assert l.size ==0;

    //insert 22
     l = newList();
    insertSort(l,22);
    assert l.head.next.element == 22;
    assert l.head.next.next ==l.head;
    assert l.size ==1;

    //insert 3,3;
     l = newList();
    insertSort(l,3);
    insertSort(l,3);
    assert l.head.next.element == 3;
    assert l.head.next.next.element == 3;
    assert l.head.next.next.next == l.head;
    assert l.size ==2;
    
       //insert 2,3,5;
     l = newList();
    insertSort(l,3);
    insertSort(l,2);
    insertSort(l,5);
    assert l.head.next.element == 2;
    assert l.head.next.next.element == 3;
    assert l.head.next.next.next.element ==5;
    assert l.head.next.next.next.next == l.head;
    assert l.size ==3;

}
