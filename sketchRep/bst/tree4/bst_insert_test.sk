/* BEGIN PACKAGE ANONYMOUS*/
struct Node {
    int key;
    Node left;
    Node right;
    Node p;
}
struct BST {
    Node root;
    int size;
}
/*bst_insert.sk302:14*/

bit __condition (int k_d, Node@ANONYMOUS x_s21_11, BST T_c, bit _out_e, Node@ANONYMOUS y_10, Node@ANONYMOUS x_f)/*bst_insert.sk302:14*/
{
    {
        {
            {| T_c |} = {| ((T_c | null)) |};
        }
        {
            {| ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((x_s21_11 | y_10)) | x_f)) | x_f.left)) | x_s21_11.right)) | y_10.right)) | x_s21_11.p)) | x_f.p)) | T_c.root)) | x_f.right)) | y_10.p)) | y_10.left)) | x_s21_11.left)) | x_f.right.left)) | x_s21_11.right.left)) | y_10.p.right)) | x_f.left.p)) | x_s21_11.right.right)) | y_10.p.left)) | T_c.root.p)) | y_10.right.left)) | x_f.p.right)) | y_10.right.right)) | x_f.left.right)) | x_s21_11.p.right)) | x_s21_11.p.p)) | x_s21_11.p.left)) | x_s21_11.left.p)) | x_f.p.p)) | y_10.p.p)) | y_10.left.left)) | x_s21_11.left.left)) | y_10.left.right)) | y_10.left.p)) | y_10.right.p)) | x_s21_11.left.right)) | x_f.right.right)) | x_f.right.p)) | x_s21_11.right.p)) | x_f.p.left)) | T_c.root.left)) | x_f.left.left)) | T_c.root.right)) |} = {| ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((x_s21_11 | y_10)) | x_f)) | x_f.left)) | x_s21_11.right)) | y_10.right)) | x_s21_11.p)) | x_f.p)) | T_c.root)) | x_f.right)) | y_10.p)) | y_10.left)) | x_s21_11.left)) | x_f.right.left)) | x_s21_11.right.left)) | y_10.p.right)) | x_f.left.p)) | x_s21_11.right.right)) | y_10.p.left)) | T_c.root.p)) | y_10.right.left)) | x_f.p.right)) | y_10.right.right)) | x_f.left.right)) | x_s21_11.p.right)) | x_s21_11.p.p)) | x_s21_11.p.left)) | x_s21_11.left.p)) | x_f.p.p)) | y_10.p.p)) | y_10.left.left)) | x_s21_11.left.left)) | y_10.left.right)) | y_10.left.p)) | y_10.right.p)) | x_s21_11.left.right)) | x_f.right.right)) | x_f.right.p)) | x_s21_11.right.p)) | x_f.p.left)) | T_c.root.left)) | x_f.left.left)) | T_c.root.right)) | null)) |};
        }
        {
            {
                {| _out_e |} = {| ((((_out_e | 0)) | 1)) |};
                {| _out_e |} += ??/*H__1953*/;
                {| _out_e |} -= ??/*H__1954*/;
            }
        }
        {
            {
                {| ((((((((((((((((((((((((((((k_d | y_10.key)) | T_c.size)) | x_s21_11.key)) | x_f.key)) | T_c.root.key)) | x_s21_11.left.key)) | x_s21_11.right.key)) | y_10.right.key)) | y_10.p.key)) | x_f.left.key)) | x_s21_11.p.key)) | y_10.left.key)) | x_f.p.key)) | x_f.right.key)) |} = {| ((((((((((((((((((((((((((((((((k_d | y_10.key)) | T_c.size)) | x_s21_11.key)) | x_f.key)) | T_c.root.key)) | x_s21_11.left.key)) | x_s21_11.right.key)) | y_10.right.key)) | y_10.p.key)) | x_f.left.key)) | x_s21_11.p.key)) | y_10.left.key)) | x_f.p.key)) | x_f.right.key)) | 0)) | 1)) |};
                {| ((((((((((((((((((((((((((((k_d | y_10.key)) | T_c.size)) | x_s21_11.key)) | x_f.key)) | T_c.root.key)) | x_s21_11.left.key)) | x_s21_11.right.key)) | y_10.right.key)) | y_10.p.key)) | x_f.left.key)) | x_s21_11.p.key)) | y_10.left.key)) | x_f.p.key)) | x_f.right.key)) |} += ??/*H__1955*/;
                {| ((((((((((((((((((((((((((((k_d | y_10.key)) | T_c.size)) | x_s21_11.key)) | x_f.key)) | T_c.root.key)) | x_s21_11.left.key)) | x_s21_11.right.key)) | y_10.right.key)) | y_10.p.key)) | x_f.left.key)) | x_s21_11.p.key)) | y_10.left.key)) | x_f.p.key)) | x_f.right.key)) |} -= ??/*H__1956*/;
            }
        }
    }
    int lhs = {| ((((((((((((((((((((((((((((((((k_d | y_10.key)) | T_c.size)) | x_s21_11.key)) | x_f.key)) | T_c.root.key)) | x_s21_11.left.key)) | x_s21_11.right.key)) | y_10.right.key)) | y_10.p.key)) | x_f.left.key)) | x_s21_11.p.key)) | y_10.left.key)) | x_f.p.key)) | x_f.right.key)) | 0)) | 1)) |};
    int rhs = {| ((((((((((((((((((((((((((((((((k_d | y_10.key)) | T_c.size)) | x_s21_11.key)) | x_f.key)) | T_c.root.key)) | x_s21_11.left.key)) | x_s21_11.right.key)) | y_10.right.key)) | y_10.p.key)) | x_f.left.key)) | x_s21_11.p.key)) | y_10.left.key)) | x_f.p.key)) | x_f.right.key)) | 0)) | 1)) |};
    bit rst = {| ((((((lhs (==) rhs)) | ((lhs (!=) rhs)))) | 1)) |};
    return rst;
}
/*bst_insert.sk302:45*/

void insertHarness ()/*bst_insert.sk302:45*/
{
    BST@ANONYMOUS bst_0;
    BST@ANONYMOUS bst_s1_1;
    newBST(bst_s1_1);
    bst_0 = bst_s1_1;
    bit _out_s3_2;
    insert_bst(bst_0, 12, _out_s3_2);
    assert (_out_s3_2 == 0); //Assert at bst_insert.sk302:53 (-25786335701075496)
    assert ((bst_0.root.key) == 12); //Assert at bst_insert.sk302:54 (7494809256614785013)
    assert ((bst_0.root.left) == (null)); //Assert at bst_insert.sk302:55 (4037388411005674254)
    assert ((bst_0.root.right) == (null)); //Assert at bst_insert.sk302:56 (-7065800892481339057)
    assert ((bst_0.size) == 1); //Assert at bst_insert.sk302:57 (-75153468350141127)
    bit _out_s5_3;
    insert_bst(bst_0, 18, _out_s5_3);
    assert (_out_s5_3 == 0); //Assert at bst_insert.sk302:60 (-4451139430240252428)
    assert ((bst_0.root.key) == 12); //Assert at bst_insert.sk302:61 (-6204251558902966896)
    assert ((bst_0.root.right.key) == 18); //Assert at bst_insert.sk302:62 (9125489359175929231)
    assert ((bst_0.size) == 2); //Assert at bst_insert.sk302:63 (3416913687396129129)
    bit _out_s7_4;
    insert_bst(bst_0, 15, _out_s7_4);
    assert (_out_s7_4 == 0); //Assert at bst_insert.sk302:66 (-990958792382110060)
    assert ((bst_0.root.key) == 12); //Assert at bst_insert.sk302:67 (4927216149630025351)
    assert ((bst_0.root.right.key) == 18); //Assert at bst_insert.sk302:68 (1932273850487841508)
    assert ((bst_0.root.right.left.key) == 15); //Assert at bst_insert.sk302:69 (738241552105872856)
    assert ((bst_0.size) == 3); //Assert at bst_insert.sk302:70 (-6075510216385507076)
    bit _out_s9_5;
    insert_bst(bst_0, 5, _out_s9_5);
    assert (_out_s9_5 == 0); //Assert at bst_insert.sk302:73 (7557010833606343201)
    assert ((bst_0.root.key) == 12); //Assert at bst_insert.sk302:74 (1048541851979186881)
    assert ((bst_0.root.left.key) == 5); //Assert at bst_insert.sk302:75 (6168041090789425062)
    assert ((bst_0.size) == 4); //Assert at bst_insert.sk302:76 (5366979946006767291)
    bit _out_s11_6;
    insert_bst(bst_0, 18, _out_s11_6);
    assert (_out_s11_6 == 1); //Assert at bst_insert.sk302:79 (-7486559125081262718)
    bit _out_s13_7;
    insert_bst(bst_0, 9, _out_s13_7);
    _out_s13_7;
    assert ((bst_0.root.key) == 12); //Assert at bst_insert.sk302:83 (-8488900249985550013)
    assert ((bst_0.root.left.key) == 5); //Assert at bst_insert.sk302:84 (-8711889887101624523)
    assert ((bst_0.root.left.right.key) == 9); //Assert at bst_insert.sk302:85 (-1308761820669592723)
    assert ((bst_0.size) == 5); //Assert at bst_insert.sk302:86 (8365330957873626506)
    bit _out_s15_8;
    insert_bst(bst_0, 19, _out_s15_8);
    _out_s15_8;
    assert ((bst_0.root.key) == 12); //Assert at bst_insert.sk302:90 (-9050432815599938868)
    assert ((bst_0.root.right.key) == 18); //Assert at bst_insert.sk302:91 (-894265227351015983)
    assert ((bst_0.root.right.right.key) == 19); //Assert at bst_insert.sk302:92 (-351093557932095637)
    assert ((bst_0.size) == 6); //Assert at bst_insert.sk302:93 (6920695513549985745)
    bit _out_s17_9;
    insert_bst(bst_0, 13, _out_s17_9);
    _out_s17_9;
    assert ((bst_0.root.right.key) == 18); //Assert at bst_insert.sk302:97 (-1932737893298642647)
    assert ((bst_0.root.right.left.key) == 15); //Assert at bst_insert.sk302:98 (3724523217810403052)
    assert ((bst_0.root.right.left.left.key) == 13); //Assert at bst_insert.sk302:99 (2051373231951833814)
    assert ((bst_0.size) == 7); //Assert at bst_insert.sk302:100 (-5599278458440694108)
    bit _out_s19_a;
    insert_bst(bst_0, 2, _out_s19_a);
    _out_s19_a;
    assert ((bst_0.root.left.key) == 5); //Assert at bst_insert.sk302:104 (7263527661975746165)
    assert ((bst_0.root.left.left.key) == 2); //Assert at bst_insert.sk302:105 (-4468092804622576327)
    assert ((bst_0.size) == 8); //Assert at bst_insert.sk302:106 (1312524245481127966)
}
/*bst_insert.sk302:110*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*bst_insert.sk302:110*/
{
    insertHarness();
}
/*bst_insert.sk302:116*/

void insertHarness__WrapperNospec ()/*bst_insert.sk302:116*/
{
}
/*bst_insert.sk302:121*/

void insert_bst (BST T_c, int k_d, ref bit _out_e)/*bst_insert.sk302:121*/
{
    {
        _out_e = 0;
        Node@ANONYMOUS x_f;
        x_f = T_c.root;
        Node@ANONYMOUS y_10;
        y_10 = null;
        {
            while(x_f != (null))
            {
                {
                    {
                        y_10 = x_f;
                        if(k_d < (x_f.key))/*bst_insert.sk302:134*/
                        {
                            {
                                x_f = x_f.left;
                            }
                        }
                        if(k_d > (x_f.key))/*bst_insert.sk302:138*/
                        {
                            {
                                x_f = x_f.right;
                            }
                        }
                    }
                }
            }
        }
        Node@ANONYMOUS x_s21_11;
        newNode(k_d, x_s21_11);
        x_f = x_s21_11;
        if(__condition(k_d, x_s21_11, T_c, _out_e, y_10, x_f))/*bst_insert.sk302:148*/
        {
            return;
        }
        if(y_10 == (null))/*bst_insert.sk302:150*/
        {
            {
                {
                    T_c.root = x_f;
                }
            }
        }
        else
        {
            {
                {
                    if((x_f.key) < (y_10.key))/*bst_insert.sk302:159*/
                    {
                        {
                            y_10.left = x_f;
                        }
                    }
                    if((x_f.key) >= (y_10.key))/*bst_insert.sk302:163*/
                    {
                        {
                            y_10.right = x_f;
                        }
                    }
                }
            }
        }
        x_f.p = y_10;
        T_c.size = (T_c.size) + 1;
        {
            _out_e = 0;
            return;
        }
    }
}
/*bst_insert.sk302:179*/

void newBST (ref BST _out_b)/*bst_insert.sk302:179*/
{
    _out_b = null;
    _out_b = new BST();
    _out_b.root = null;
    _out_b.size = 0;
    return;
}
/*bst_insert.sk302:189*/

void newNode (int val_12, ref Node _out_13)/*bst_insert.sk302:189*/
{
    _out_13 = null;
    _out_13 = new Node();
    _out_13.key = val_12;
    _out_13.left = null;
    _out_13.right = null;
    _out_13.p = null;
    return;
}
/* END PACKAGE ANONYMOUS*/
